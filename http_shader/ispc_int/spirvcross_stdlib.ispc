//////////////////////////////
// This ISPC spirv stdlib kernel is autogenerated by spirv-cross.
//////////////////////////////
#define SPIRV_INLINE inline

//////////////////////////////
// Default Types
//////////////////////////////
typedef float mat3[3][3];
typedef float mat4[4][4];
struct float1
{
    float x;
};

struct float2
{
    float x;
    float y;
};

struct float3
{
    float x;
    float y;
    float z;
};

struct float4
{
    float x;
    float y;
    float z;
    float w;
};

struct int1
{
    int x;
};

struct int2
{
    int x;
    int y;
};

struct int3
{
    int x;
    int y;
    int z;
};

struct int4
{
    int x;
    int y;
    int z;
    int w;
};

struct bool1
{
    bool x;
};

struct bool2
{
    bool x;
    bool y;
};

struct bool3
{
    bool x;
    bool y;
    bool z;
};

struct bool4
{
    bool x;
    bool y;
    bool z;
    bool w;
};


//////////////////////////////
// Default Image Types
//////////////////////////////
struct pixel4D
{
    unsigned int8 r;
    unsigned int8 g;
    unsigned int8 b;
    unsigned int8 a;
};

struct image2D
{
    unsigned int width;
    unsigned int height;
    unsigned int stride;
    struct pixel4D* data;
};

//////////////////////////////
// Default Varying Casts
//////////////////////////////
static SPIRV_INLINE varying float to_varying(uniform float a) { return (varying float)a; }
static SPIRV_INLINE varying float2 to_varying(uniform float2& a) { return (varying float2)a; }
static SPIRV_INLINE varying float3 to_varying(uniform float3& a) { return (varying float3)a; }
static SPIRV_INLINE varying float4 to_varying(uniform float4& a) { return (varying float4)a; }
static SPIRV_INLINE varying float to_varying(varying float a) { return (varying float)a; }
static SPIRV_INLINE varying float2 to_varying(varying float2& a) { return (varying float2)a; }
static SPIRV_INLINE varying float3 to_varying(varying float3& a) { return (varying float3)a; }
static SPIRV_INLINE varying float4 to_varying(varying float4& a) { return (varying float4)a; }
static SPIRV_INLINE varying int to_varying(uniform int a) { return (varying int)a; }
static SPIRV_INLINE varying int2 to_varying(uniform int2& a) { return (varying int2)a; }
static SPIRV_INLINE varying int3 to_varying(uniform int3& a) { return (varying int3)a; }
static SPIRV_INLINE varying int4 to_varying(uniform int4& a) { return (varying int4)a; }
static SPIRV_INLINE varying int to_varying(varying int a) { return (varying int)a; }
static SPIRV_INLINE varying int2 to_varying(varying int2& a) { return (varying int2)a; }
static SPIRV_INLINE varying int3 to_varying(varying int3& a) { return (varying int3)a; }
static SPIRV_INLINE varying int4 to_varying(varying int4& a) { return (varying int4)a; }

//////////////////////////////
// Default Simple Casts That Honour Varying/Uniforms
//////////////////////////////
static SPIRV_INLINE const uniform float float_cast(const uniform float& a) { return (const uniform float) a; }
static SPIRV_INLINE uniform float float_cast(uniform float& a) { return (uniform float) a; }
static SPIRV_INLINE const uniform float float_cast(const uniform int& a) { return (const uniform float) a; }
static SPIRV_INLINE uniform float float_cast(uniform int& a) { return (uniform float) a; }
static SPIRV_INLINE const uniform float float_cast(const uniform bool& a) { return (const uniform float) a; }
static SPIRV_INLINE uniform float float_cast(uniform bool& a) { return (uniform float) a; }
static SPIRV_INLINE const varying float float_cast(const varying float& a) { return (const varying float) a; }
static SPIRV_INLINE varying float float_cast(varying float& a) { return (varying float) a; }
static SPIRV_INLINE const varying float float_cast(const varying int& a) { return (const varying float) a; }
static SPIRV_INLINE varying float float_cast(varying int& a) { return (varying float) a; }
static SPIRV_INLINE const varying float float_cast(const varying bool& a) { return (const varying float) a; }
static SPIRV_INLINE varying float float_cast(varying bool& a) { return (varying float) a; }
static SPIRV_INLINE const uniform int int_cast(const uniform float& a) { return (const uniform int) a; }
static SPIRV_INLINE uniform int int_cast(uniform float& a) { return (uniform int) a; }
static SPIRV_INLINE const uniform int int_cast(const uniform int& a) { return (const uniform int) a; }
static SPIRV_INLINE uniform int int_cast(uniform int& a) { return (uniform int) a; }
static SPIRV_INLINE const uniform int int_cast(const uniform bool& a) { return (const uniform int) a; }
static SPIRV_INLINE uniform int int_cast(uniform bool& a) { return (uniform int) a; }
static SPIRV_INLINE const varying int int_cast(const varying float& a) { return (const varying int) a; }
static SPIRV_INLINE varying int int_cast(varying float& a) { return (varying int) a; }
static SPIRV_INLINE const varying int int_cast(const varying int& a) { return (const varying int) a; }
static SPIRV_INLINE varying int int_cast(varying int& a) { return (varying int) a; }
static SPIRV_INLINE const varying int int_cast(const varying bool& a) { return (const varying int) a; }
static SPIRV_INLINE varying int int_cast(varying bool& a) { return (varying int) a; }

//////////////////////////////
// Default Constructors
//////////////////////////////
static SPIRV_INLINE varying float2 float2_init(varying const float2& a ) { varying float2 ret = { a.x, a.y }; return ret; }
static SPIRV_INLINE varying float2 float2_init(varying const float a ) { varying float2 ret = { a, a }; return ret; }
static SPIRV_INLINE varying float2 float2_init(varying const float a, varying const float b ) { varying float2 ret = { a, b }; return ret; }
static SPIRV_INLINE varying float2 float2_init(varying const float a, uniform const float b ) { varying float2 ret = { a, b }; return ret; }
static SPIRV_INLINE varying float2 float2_init(varying const int2& a ) { varying float2 ret = {  (varying float)a.x,  (varying float)a.y }; return ret; }
static SPIRV_INLINE varying float3 float3_init(varying const float3& a ) { varying float3 ret = { a.x, a.y, a.z }; return ret; }
static SPIRV_INLINE varying float3 float3_init(varying const float a ) { varying float3 ret = { a, a, a }; return ret; }
static SPIRV_INLINE varying float3 float3_init(varying const float a, varying const float b, varying const float c ) { varying float3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE varying float3 float3_init(varying const float a, varying const float b, uniform const float c ) { varying float3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE varying float3 float3_init(varying const float2& a, varying const float b ) { varying float3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE varying float3 float3_init(varying const float2& a, uniform const float b ) { varying float3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE varying float3 float3_init(varying const int3& a ) { varying float3 ret = {  (varying float)a.x,  (varying float)a.y,  (varying float)a.z }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float4& a ) { varying float4 ret = { a.x, a.y, a.z, a.w }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float a ) { varying float4 ret = { a, a, a, a }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float a, varying const float b, varying const float c, varying const float d ) { varying float4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float a, varying const float b, varying const float c, uniform const float d ) { varying float4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float2& a, varying const float b, varying const float c ) { varying float4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float2& a, varying const float b, uniform const float c ) { varying float4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float3& a, varying const float b ) { varying float4 ret = { a.x, a.y, a.z, b }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const float3& a, uniform const float b ) { varying float4 ret = { a.x, a.y, a.z, b }; return ret; }
static SPIRV_INLINE varying float4 float4_init(varying const int4& a ) { varying float4 ret = {  (varying float)a.x,  (varying float)a.y,  (varying float)a.z,  (varying float)a.w }; return ret; }

static SPIRV_INLINE uniform float2 float2_init(uniform const float2& a ) { uniform float2 ret = { a.x, a.y }; return ret; }
static SPIRV_INLINE uniform float2 float2_init(uniform const float a ) { uniform float2 ret = { a, a }; return ret; }
static SPIRV_INLINE uniform float2 float2_init(uniform const float a, uniform const float b ) { uniform float2 ret = { a, b }; return ret; }
static SPIRV_INLINE uniform float2 float2_init(uniform const int2& a ) { uniform float2 ret = {  (uniform float)a.x,  (uniform float)a.y }; return ret; }
static SPIRV_INLINE uniform float3 float3_init(uniform const float3& a ) { uniform float3 ret = { a.x, a.y, a.z }; return ret; }
static SPIRV_INLINE uniform float3 float3_init(uniform const float a ) { uniform float3 ret = { a, a, a }; return ret; }
static SPIRV_INLINE uniform float3 float3_init(uniform const float a, uniform const float b, uniform const float c ) { uniform float3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE uniform float3 float3_init(uniform const float2& a, uniform const float b ) { uniform float3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE uniform float3 float3_init(uniform const int3& a ) { uniform float3 ret = {  (uniform float)a.x,  (uniform float)a.y,  (uniform float)a.z }; return ret; }
static SPIRV_INLINE uniform float4 float4_init(uniform const float4& a ) { uniform float4 ret = { a.x, a.y, a.z, a.w }; return ret; }
static SPIRV_INLINE uniform float4 float4_init(uniform const float a ) { uniform float4 ret = { a, a, a, a }; return ret; }
static SPIRV_INLINE uniform float4 float4_init(uniform const float a, uniform const float b, uniform const float c, uniform const float d ) { uniform float4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE uniform float4 float4_init(uniform const float2& a, uniform const float b, uniform const float c ) { uniform float4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE uniform float4 float4_init(uniform const float3& a, uniform const float b ) { uniform float4 ret = { a.x, a.y, a.z, b }; return ret; }
static SPIRV_INLINE uniform float4 float4_init(uniform const int4& a ) { uniform float4 ret = {  (uniform float)a.x,  (uniform float)a.y,  (uniform float)a.z,  (uniform float)a.w }; return ret; }

#define float2(...) float2_init(__VA_ARGS__)
#define float3(...) float3_init(__VA_ARGS__)
#define float4(...) float4_init(__VA_ARGS__)

static SPIRV_INLINE varying int2 int2_init(varying const int2& a ) { varying int2 ret = { a.x, a.y }; return ret; }
static SPIRV_INLINE varying int2 int2_init(varying const int a ) { varying int2 ret = { a, a }; return ret; }
static SPIRV_INLINE varying int2 int2_init(varying const int a, varying const int b ) { varying int2 ret = { a, b }; return ret; }
static SPIRV_INLINE varying int2 int2_init(varying const int a, uniform const int b ) { varying int2 ret = { a, b }; return ret; }
static SPIRV_INLINE varying int2 int2_init(varying const float2& a ) { varying int2 ret = {  (varying int)a.x,  (varying int)a.y }; return ret; }
static SPIRV_INLINE varying int3 int3_init(varying const int3& a ) { varying int3 ret = { a.x, a.y, a.z }; return ret; }
static SPIRV_INLINE varying int3 int3_init(varying const int a ) { varying int3 ret = { a, a, a }; return ret; }
static SPIRV_INLINE varying int3 int3_init(varying const int a, varying const int b, varying const int c ) { varying int3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE varying int3 int3_init(varying const int a, varying const int b, uniform const int c ) { varying int3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE varying int3 int3_init(varying const int2& a, varying const int b ) { varying int3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE varying int3 int3_init(varying const int2& a, uniform const int b ) { varying int3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE varying int3 int3_init(varying const float3& a ) { varying int3 ret = {  (varying int)a.x,  (varying int)a.y,  (varying int)a.z }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int4& a ) { varying int4 ret = { a.x, a.y, a.z, a.w }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int a ) { varying int4 ret = { a, a, a, a }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int a, varying const int b, varying const int c, varying const int d ) { varying int4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int a, varying const int b, varying const int c, uniform const int d ) { varying int4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int2& a, varying const int b, varying const int c ) { varying int4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int2& a, varying const int b, uniform const int c ) { varying int4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int3& a, varying const int b ) { varying int4 ret = { a.x, a.y, a.z, b }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const int3& a, uniform const int b ) { varying int4 ret = { a.x, a.y, a.z, b }; return ret; }
static SPIRV_INLINE varying int4 int4_init(varying const float4& a ) { varying int4 ret = {  (varying int)a.x,  (varying int)a.y,  (varying int)a.z,  (varying int)a.w }; return ret; }

static SPIRV_INLINE uniform int2 int2_init(uniform const int2& a ) { uniform int2 ret = { a.x, a.y }; return ret; }
static SPIRV_INLINE uniform int2 int2_init(uniform const int a ) { uniform int2 ret = { a, a }; return ret; }
static SPIRV_INLINE uniform int2 int2_init(uniform const int a, uniform const int b ) { uniform int2 ret = { a, b }; return ret; }
static SPIRV_INLINE uniform int2 int2_init(uniform const float2& a ) { uniform int2 ret = {  (uniform int)a.x,  (uniform int)a.y }; return ret; }
static SPIRV_INLINE uniform int3 int3_init(uniform const int3& a ) { uniform int3 ret = { a.x, a.y, a.z }; return ret; }
static SPIRV_INLINE uniform int3 int3_init(uniform const int a ) { uniform int3 ret = { a, a, a }; return ret; }
static SPIRV_INLINE uniform int3 int3_init(uniform const int a, uniform const int b, uniform const int c ) { uniform int3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE uniform int3 int3_init(uniform const int2& a, uniform const int b ) { uniform int3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE uniform int3 int3_init(uniform const float3& a ) { uniform int3 ret = {  (uniform int)a.x,  (uniform int)a.y,  (uniform int)a.z }; return ret; }
static SPIRV_INLINE uniform int4 int4_init(uniform const int4& a ) { uniform int4 ret = { a.x, a.y, a.z, a.w }; return ret; }
static SPIRV_INLINE uniform int4 int4_init(uniform const int a ) { uniform int4 ret = { a, a, a, a }; return ret; }
static SPIRV_INLINE uniform int4 int4_init(uniform const int a, uniform const int b, uniform const int c, uniform const int d ) { uniform int4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE uniform int4 int4_init(uniform const int2& a, uniform const int b, uniform const int c ) { uniform int4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE uniform int4 int4_init(uniform const int3& a, uniform const int b ) { uniform int4 ret = { a.x, a.y, a.z, b }; return ret; }
static SPIRV_INLINE uniform int4 int4_init(uniform const float4& a ) { uniform int4 ret = {  (uniform int)a.x,  (uniform int)a.y,  (uniform int)a.z,  (uniform int)a.w }; return ret; }

#define int2(...) int2_init(__VA_ARGS__)
#define int3(...) int3_init(__VA_ARGS__)
#define int4(...) int4_init(__VA_ARGS__)

static SPIRV_INLINE varying bool2 bool2_init(varying const bool2& a ) { varying bool2 ret = { a.x, a.y }; return ret; }
static SPIRV_INLINE varying bool2 bool2_init(varying const bool a ) { varying bool2 ret = { a, a }; return ret; }
static SPIRV_INLINE varying bool2 bool2_init(varying const bool a, varying const bool b ) { varying bool2 ret = { a, b }; return ret; }
static SPIRV_INLINE varying bool2 bool2_init(varying const bool a, uniform const bool b ) { varying bool2 ret = { a, b }; return ret; }
static SPIRV_INLINE varying bool3 bool3_init(varying const bool3& a ) { varying bool3 ret = { a.x, a.y, a.z }; return ret; }
static SPIRV_INLINE varying bool3 bool3_init(varying const bool a ) { varying bool3 ret = { a, a, a }; return ret; }
static SPIRV_INLINE varying bool3 bool3_init(varying const bool a, varying const bool b, varying const bool c ) { varying bool3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE varying bool3 bool3_init(varying const bool a, varying const bool b, uniform const bool c ) { varying bool3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE varying bool3 bool3_init(varying const bool2& a, varying const bool b ) { varying bool3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE varying bool3 bool3_init(varying const bool2& a, uniform const bool b ) { varying bool3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool4& a ) { varying bool4 ret = { a.x, a.y, a.z, a.w }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool a ) { varying bool4 ret = { a, a, a, a }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool a, varying const bool b, varying const bool c, varying const bool d ) { varying bool4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool a, varying const bool b, varying const bool c, uniform const bool d ) { varying bool4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool2& a, varying const bool b, varying const bool c ) { varying bool4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool2& a, varying const bool b, uniform const bool c ) { varying bool4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool3& a, varying const bool b ) { varying bool4 ret = { a.x, a.y, a.z, b }; return ret; }
static SPIRV_INLINE varying bool4 bool4_init(varying const bool3& a, uniform const bool b ) { varying bool4 ret = { a.x, a.y, a.z, b }; return ret; }

static SPIRV_INLINE uniform bool2 bool2_init(uniform const bool2& a ) { uniform bool2 ret = { a.x, a.y }; return ret; }
static SPIRV_INLINE uniform bool2 bool2_init(uniform const bool a ) { uniform bool2 ret = { a, a }; return ret; }
static SPIRV_INLINE uniform bool2 bool2_init(uniform const bool a, uniform const bool b ) { uniform bool2 ret = { a, b }; return ret; }
static SPIRV_INLINE uniform bool3 bool3_init(uniform const bool3& a ) { uniform bool3 ret = { a.x, a.y, a.z }; return ret; }
static SPIRV_INLINE uniform bool3 bool3_init(uniform const bool a ) { uniform bool3 ret = { a, a, a }; return ret; }
static SPIRV_INLINE uniform bool3 bool3_init(uniform const bool a, uniform const bool b, uniform const bool c ) { uniform bool3 ret = { a, b, c }; return ret; }
static SPIRV_INLINE uniform bool3 bool3_init(uniform const bool2& a, uniform const bool b ) { uniform bool3 ret = { a.x, a.y, b }; return ret; }
static SPIRV_INLINE uniform bool4 bool4_init(uniform const bool4& a ) { uniform bool4 ret = { a.x, a.y, a.z, a.w }; return ret; }
static SPIRV_INLINE uniform bool4 bool4_init(uniform const bool a ) { uniform bool4 ret = { a, a, a, a }; return ret; }
static SPIRV_INLINE uniform bool4 bool4_init(uniform const bool a, uniform const bool b, uniform const bool c, uniform const bool d ) { uniform bool4 ret = { a, b, c, d }; return ret; }
static SPIRV_INLINE uniform bool4 bool4_init(uniform const bool2& a, uniform const bool b, uniform const bool c ) { uniform bool4 ret = { a.x, a.y, b, c }; return ret; }
static SPIRV_INLINE uniform bool4 bool4_init(uniform const bool3& a, uniform const bool b ) { uniform bool4 ret = { a.x, a.y, a.z, b }; return ret; }

#define bool2(...) bool2_init(__VA_ARGS__)
#define bool3(...) bool3_init(__VA_ARGS__)
#define bool4(...) bool4_init(__VA_ARGS__)


//////////////////////////////
// Default Operators
//////////////////////////////
static SPIRV_INLINE uniform float2 operator*(uniform float2 a, uniform float b) { uniform float2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE uniform float2 operator*(uniform float2 a, uniform float2 b) { uniform float2 ret = { a.x * b.x , a.y * b.y }; return ret; }
static SPIRV_INLINE varying float2 operator*(uniform float2 a, varying float b) { varying float2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE varying float2 operator*(uniform float2 a, varying float2 b) { varying float2 ret = { a.x * b.x , a.y * b.y }; return ret; }
static SPIRV_INLINE varying float2 operator*(varying float2 a, uniform float b) { varying float2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE varying float2 operator*(varying float2 a, uniform float2 b) { varying float2 ret = { a.x * b.x , a.y * b.y }; return ret; }
static SPIRV_INLINE varying float2 operator*(varying float2 a, varying float b) { varying float2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE varying float2 operator*(varying float2 a, varying float2 b) { varying float2 ret = { a.x * b.x , a.y * b.y }; return ret; }

static SPIRV_INLINE uniform float2 operator/(uniform float2 a, uniform float b) { uniform float2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE uniform float2 operator/(uniform float2 a, uniform float2 b) { uniform float2 ret = { a.x / b.x , a.y / b.y }; return ret; }
static SPIRV_INLINE varying float2 operator/(uniform float2 a, varying float b) { varying float2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE varying float2 operator/(uniform float2 a, varying float2 b) { varying float2 ret = { a.x / b.x , a.y / b.y }; return ret; }
static SPIRV_INLINE varying float2 operator/(varying float2 a, uniform float b) { varying float2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE varying float2 operator/(varying float2 a, uniform float2 b) { varying float2 ret = { a.x / b.x , a.y / b.y }; return ret; }
static SPIRV_INLINE varying float2 operator/(varying float2 a, varying float b) { varying float2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE varying float2 operator/(varying float2 a, varying float2 b) { varying float2 ret = { a.x / b.x , a.y / b.y }; return ret; }

static SPIRV_INLINE uniform float2 operator+(uniform float2 a, uniform float b) { uniform float2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE uniform float2 operator+(uniform float2 a, uniform float2 b) { uniform float2 ret = { a.x + b.x , a.y + b.y }; return ret; }
static SPIRV_INLINE varying float2 operator+(uniform float2 a, varying float b) { varying float2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE varying float2 operator+(uniform float2 a, varying float2 b) { varying float2 ret = { a.x + b.x , a.y + b.y }; return ret; }
static SPIRV_INLINE varying float2 operator+(varying float2 a, uniform float b) { varying float2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE varying float2 operator+(varying float2 a, uniform float2 b) { varying float2 ret = { a.x + b.x , a.y + b.y }; return ret; }
static SPIRV_INLINE varying float2 operator+(varying float2 a, varying float b) { varying float2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE varying float2 operator+(varying float2 a, varying float2 b) { varying float2 ret = { a.x + b.x , a.y + b.y }; return ret; }

static SPIRV_INLINE uniform float2 operator-(uniform float2 a, uniform float b) { uniform float2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE uniform float2 operator-(uniform float2 a, uniform float2 b) { uniform float2 ret = { a.x - b.x , a.y - b.y }; return ret; }
static SPIRV_INLINE varying float2 operator-(uniform float2 a, varying float b) { varying float2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE varying float2 operator-(uniform float2 a, varying float2 b) { varying float2 ret = { a.x - b.x , a.y - b.y }; return ret; }
static SPIRV_INLINE varying float2 operator-(varying float2 a, uniform float b) { varying float2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE varying float2 operator-(varying float2 a, uniform float2 b) { varying float2 ret = { a.x - b.x , a.y - b.y }; return ret; }
static SPIRV_INLINE varying float2 operator-(varying float2 a, varying float b) { varying float2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE varying float2 operator-(varying float2 a, varying float2 b) { varying float2 ret = { a.x - b.x , a.y - b.y }; return ret; }

static SPIRV_INLINE uniform float3 operator*(uniform float3 a, uniform float b) { uniform float3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE uniform float3 operator*(uniform float3 a, uniform float3 b) { uniform float3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }
static SPIRV_INLINE varying float3 operator*(uniform float3 a, varying float b) { varying float3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE varying float3 operator*(uniform float3 a, varying float3 b) { varying float3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }
static SPIRV_INLINE varying float3 operator*(varying float3 a, uniform float b) { varying float3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE varying float3 operator*(varying float3 a, uniform float3 b) { varying float3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }
static SPIRV_INLINE varying float3 operator*(varying float3 a, varying float b) { varying float3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE varying float3 operator*(varying float3 a, varying float3 b) { varying float3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }

static SPIRV_INLINE uniform float3 operator/(uniform float3 a, uniform float b) { uniform float3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE uniform float3 operator/(uniform float3 a, uniform float3 b) { uniform float3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }
static SPIRV_INLINE varying float3 operator/(uniform float3 a, varying float b) { varying float3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE varying float3 operator/(uniform float3 a, varying float3 b) { varying float3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }
static SPIRV_INLINE varying float3 operator/(varying float3 a, uniform float b) { varying float3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE varying float3 operator/(varying float3 a, uniform float3 b) { varying float3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }
static SPIRV_INLINE varying float3 operator/(varying float3 a, varying float b) { varying float3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE varying float3 operator/(varying float3 a, varying float3 b) { varying float3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }

static SPIRV_INLINE uniform float3 operator+(uniform float3 a, uniform float b) { uniform float3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE uniform float3 operator+(uniform float3 a, uniform float3 b) { uniform float3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }
static SPIRV_INLINE varying float3 operator+(uniform float3 a, varying float b) { varying float3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE varying float3 operator+(uniform float3 a, varying float3 b) { varying float3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }
static SPIRV_INLINE varying float3 operator+(varying float3 a, uniform float b) { varying float3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE varying float3 operator+(varying float3 a, uniform float3 b) { varying float3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }
static SPIRV_INLINE varying float3 operator+(varying float3 a, varying float b) { varying float3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE varying float3 operator+(varying float3 a, varying float3 b) { varying float3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }

static SPIRV_INLINE uniform float3 operator-(uniform float3 a, uniform float b) { uniform float3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE uniform float3 operator-(uniform float3 a, uniform float3 b) { uniform float3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }
static SPIRV_INLINE varying float3 operator-(uniform float3 a, varying float b) { varying float3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE varying float3 operator-(uniform float3 a, varying float3 b) { varying float3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }
static SPIRV_INLINE varying float3 operator-(varying float3 a, uniform float b) { varying float3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE varying float3 operator-(varying float3 a, uniform float3 b) { varying float3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }
static SPIRV_INLINE varying float3 operator-(varying float3 a, varying float b) { varying float3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE varying float3 operator-(varying float3 a, varying float3 b) { varying float3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }

static SPIRV_INLINE uniform float4 operator*(uniform float4 a, uniform float b) { uniform float4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE uniform float4 operator*(uniform float4 a, uniform float4 b) { uniform float4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }
static SPIRV_INLINE varying float4 operator*(uniform float4 a, varying float b) { varying float4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE varying float4 operator*(uniform float4 a, varying float4 b) { varying float4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }
static SPIRV_INLINE varying float4 operator*(varying float4 a, uniform float b) { varying float4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE varying float4 operator*(varying float4 a, uniform float4 b) { varying float4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }
static SPIRV_INLINE varying float4 operator*(varying float4 a, varying float b) { varying float4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE varying float4 operator*(varying float4 a, varying float4 b) { varying float4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }

static SPIRV_INLINE uniform float4 operator/(uniform float4 a, uniform float b) { uniform float4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE uniform float4 operator/(uniform float4 a, uniform float4 b) { uniform float4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }
static SPIRV_INLINE varying float4 operator/(uniform float4 a, varying float b) { varying float4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE varying float4 operator/(uniform float4 a, varying float4 b) { varying float4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }
static SPIRV_INLINE varying float4 operator/(varying float4 a, uniform float b) { varying float4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE varying float4 operator/(varying float4 a, uniform float4 b) { varying float4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }
static SPIRV_INLINE varying float4 operator/(varying float4 a, varying float b) { varying float4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE varying float4 operator/(varying float4 a, varying float4 b) { varying float4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }

static SPIRV_INLINE uniform float4 operator+(uniform float4 a, uniform float b) { uniform float4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE uniform float4 operator+(uniform float4 a, uniform float4 b) { uniform float4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }
static SPIRV_INLINE varying float4 operator+(uniform float4 a, varying float b) { varying float4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE varying float4 operator+(uniform float4 a, varying float4 b) { varying float4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }
static SPIRV_INLINE varying float4 operator+(varying float4 a, uniform float b) { varying float4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE varying float4 operator+(varying float4 a, uniform float4 b) { varying float4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }
static SPIRV_INLINE varying float4 operator+(varying float4 a, varying float b) { varying float4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE varying float4 operator+(varying float4 a, varying float4 b) { varying float4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }

static SPIRV_INLINE uniform float4 operator-(uniform float4 a, uniform float b) { uniform float4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE uniform float4 operator-(uniform float4 a, uniform float4 b) { uniform float4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }
static SPIRV_INLINE varying float4 operator-(uniform float4 a, varying float b) { varying float4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE varying float4 operator-(uniform float4 a, varying float4 b) { varying float4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }
static SPIRV_INLINE varying float4 operator-(varying float4 a, uniform float b) { varying float4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE varying float4 operator-(varying float4 a, uniform float4 b) { varying float4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }
static SPIRV_INLINE varying float4 operator-(varying float4 a, varying float b) { varying float4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE varying float4 operator-(varying float4 a, varying float4 b) { varying float4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }

static SPIRV_INLINE uniform int2 operator*(uniform int2 a, uniform int b) { uniform int2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE uniform int2 operator*(uniform int2 a, uniform int2 b) { uniform int2 ret = { a.x * b.x , a.y * b.y }; return ret; }
static SPIRV_INLINE varying int2 operator*(uniform int2 a, varying int b) { varying int2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE varying int2 operator*(uniform int2 a, varying int2 b) { varying int2 ret = { a.x * b.x , a.y * b.y }; return ret; }
static SPIRV_INLINE varying int2 operator*(varying int2 a, uniform int b) { varying int2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE varying int2 operator*(varying int2 a, uniform int2 b) { varying int2 ret = { a.x * b.x , a.y * b.y }; return ret; }
static SPIRV_INLINE varying int2 operator*(varying int2 a, varying int b) { varying int2 ret = { a.x * b , a.y * b }; return ret; }
static SPIRV_INLINE varying int2 operator*(varying int2 a, varying int2 b) { varying int2 ret = { a.x * b.x , a.y * b.y }; return ret; }

static SPIRV_INLINE uniform int2 operator/(uniform int2 a, uniform int b) { uniform int2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE uniform int2 operator/(uniform int2 a, uniform int2 b) { uniform int2 ret = { a.x / b.x , a.y / b.y }; return ret; }
static SPIRV_INLINE varying int2 operator/(uniform int2 a, varying int b) { varying int2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE varying int2 operator/(uniform int2 a, varying int2 b) { varying int2 ret = { a.x / b.x , a.y / b.y }; return ret; }
static SPIRV_INLINE varying int2 operator/(varying int2 a, uniform int b) { varying int2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE varying int2 operator/(varying int2 a, uniform int2 b) { varying int2 ret = { a.x / b.x , a.y / b.y }; return ret; }
static SPIRV_INLINE varying int2 operator/(varying int2 a, varying int b) { varying int2 ret = { a.x / b , a.y / b }; return ret; }
static SPIRV_INLINE varying int2 operator/(varying int2 a, varying int2 b) { varying int2 ret = { a.x / b.x , a.y / b.y }; return ret; }

static SPIRV_INLINE uniform int2 operator+(uniform int2 a, uniform int b) { uniform int2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE uniform int2 operator+(uniform int2 a, uniform int2 b) { uniform int2 ret = { a.x + b.x , a.y + b.y }; return ret; }
static SPIRV_INLINE varying int2 operator+(uniform int2 a, varying int b) { varying int2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE varying int2 operator+(uniform int2 a, varying int2 b) { varying int2 ret = { a.x + b.x , a.y + b.y }; return ret; }
static SPIRV_INLINE varying int2 operator+(varying int2 a, uniform int b) { varying int2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE varying int2 operator+(varying int2 a, uniform int2 b) { varying int2 ret = { a.x + b.x , a.y + b.y }; return ret; }
static SPIRV_INLINE varying int2 operator+(varying int2 a, varying int b) { varying int2 ret = { a.x + b , a.y + b }; return ret; }
static SPIRV_INLINE varying int2 operator+(varying int2 a, varying int2 b) { varying int2 ret = { a.x + b.x , a.y + b.y }; return ret; }

static SPIRV_INLINE uniform int2 operator-(uniform int2 a, uniform int b) { uniform int2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE uniform int2 operator-(uniform int2 a, uniform int2 b) { uniform int2 ret = { a.x - b.x , a.y - b.y }; return ret; }
static SPIRV_INLINE varying int2 operator-(uniform int2 a, varying int b) { varying int2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE varying int2 operator-(uniform int2 a, varying int2 b) { varying int2 ret = { a.x - b.x , a.y - b.y }; return ret; }
static SPIRV_INLINE varying int2 operator-(varying int2 a, uniform int b) { varying int2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE varying int2 operator-(varying int2 a, uniform int2 b) { varying int2 ret = { a.x - b.x , a.y - b.y }; return ret; }
static SPIRV_INLINE varying int2 operator-(varying int2 a, varying int b) { varying int2 ret = { a.x - b , a.y - b }; return ret; }
static SPIRV_INLINE varying int2 operator-(varying int2 a, varying int2 b) { varying int2 ret = { a.x - b.x , a.y - b.y }; return ret; }

static SPIRV_INLINE uniform int3 operator*(uniform int3 a, uniform int b) { uniform int3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE uniform int3 operator*(uniform int3 a, uniform int3 b) { uniform int3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }
static SPIRV_INLINE varying int3 operator*(uniform int3 a, varying int b) { varying int3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE varying int3 operator*(uniform int3 a, varying int3 b) { varying int3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }
static SPIRV_INLINE varying int3 operator*(varying int3 a, uniform int b) { varying int3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE varying int3 operator*(varying int3 a, uniform int3 b) { varying int3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }
static SPIRV_INLINE varying int3 operator*(varying int3 a, varying int b) { varying int3 ret = { a.x * b , a.y * b , a.z * b }; return ret; }
static SPIRV_INLINE varying int3 operator*(varying int3 a, varying int3 b) { varying int3 ret = { a.x * b.x , a.y * b.y , a.z * b.z }; return ret; }

static SPIRV_INLINE uniform int3 operator/(uniform int3 a, uniform int b) { uniform int3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE uniform int3 operator/(uniform int3 a, uniform int3 b) { uniform int3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }
static SPIRV_INLINE varying int3 operator/(uniform int3 a, varying int b) { varying int3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE varying int3 operator/(uniform int3 a, varying int3 b) { varying int3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }
static SPIRV_INLINE varying int3 operator/(varying int3 a, uniform int b) { varying int3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE varying int3 operator/(varying int3 a, uniform int3 b) { varying int3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }
static SPIRV_INLINE varying int3 operator/(varying int3 a, varying int b) { varying int3 ret = { a.x / b , a.y / b , a.z / b }; return ret; }
static SPIRV_INLINE varying int3 operator/(varying int3 a, varying int3 b) { varying int3 ret = { a.x / b.x , a.y / b.y , a.z / b.z }; return ret; }

static SPIRV_INLINE uniform int3 operator+(uniform int3 a, uniform int b) { uniform int3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE uniform int3 operator+(uniform int3 a, uniform int3 b) { uniform int3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }
static SPIRV_INLINE varying int3 operator+(uniform int3 a, varying int b) { varying int3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE varying int3 operator+(uniform int3 a, varying int3 b) { varying int3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }
static SPIRV_INLINE varying int3 operator+(varying int3 a, uniform int b) { varying int3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE varying int3 operator+(varying int3 a, uniform int3 b) { varying int3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }
static SPIRV_INLINE varying int3 operator+(varying int3 a, varying int b) { varying int3 ret = { a.x + b , a.y + b , a.z + b }; return ret; }
static SPIRV_INLINE varying int3 operator+(varying int3 a, varying int3 b) { varying int3 ret = { a.x + b.x , a.y + b.y , a.z + b.z }; return ret; }

static SPIRV_INLINE uniform int3 operator-(uniform int3 a, uniform int b) { uniform int3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE uniform int3 operator-(uniform int3 a, uniform int3 b) { uniform int3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }
static SPIRV_INLINE varying int3 operator-(uniform int3 a, varying int b) { varying int3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE varying int3 operator-(uniform int3 a, varying int3 b) { varying int3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }
static SPIRV_INLINE varying int3 operator-(varying int3 a, uniform int b) { varying int3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE varying int3 operator-(varying int3 a, uniform int3 b) { varying int3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }
static SPIRV_INLINE varying int3 operator-(varying int3 a, varying int b) { varying int3 ret = { a.x - b , a.y - b , a.z - b }; return ret; }
static SPIRV_INLINE varying int3 operator-(varying int3 a, varying int3 b) { varying int3 ret = { a.x - b.x , a.y - b.y , a.z - b.z }; return ret; }

static SPIRV_INLINE uniform int4 operator*(uniform int4 a, uniform int b) { uniform int4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE uniform int4 operator*(uniform int4 a, uniform int4 b) { uniform int4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }
static SPIRV_INLINE varying int4 operator*(uniform int4 a, varying int b) { varying int4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE varying int4 operator*(uniform int4 a, varying int4 b) { varying int4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }
static SPIRV_INLINE varying int4 operator*(varying int4 a, uniform int b) { varying int4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE varying int4 operator*(varying int4 a, uniform int4 b) { varying int4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }
static SPIRV_INLINE varying int4 operator*(varying int4 a, varying int b) { varying int4 ret = { a.x * b , a.y * b , a.z * b , a.w * b }; return ret; }
static SPIRV_INLINE varying int4 operator*(varying int4 a, varying int4 b) { varying int4 ret = { a.x * b.x , a.y * b.y , a.z * b.z , a.w * b.w }; return ret; }

static SPIRV_INLINE uniform int4 operator/(uniform int4 a, uniform int b) { uniform int4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE uniform int4 operator/(uniform int4 a, uniform int4 b) { uniform int4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }
static SPIRV_INLINE varying int4 operator/(uniform int4 a, varying int b) { varying int4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE varying int4 operator/(uniform int4 a, varying int4 b) { varying int4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }
static SPIRV_INLINE varying int4 operator/(varying int4 a, uniform int b) { varying int4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE varying int4 operator/(varying int4 a, uniform int4 b) { varying int4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }
static SPIRV_INLINE varying int4 operator/(varying int4 a, varying int b) { varying int4 ret = { a.x / b , a.y / b , a.z / b , a.w / b }; return ret; }
static SPIRV_INLINE varying int4 operator/(varying int4 a, varying int4 b) { varying int4 ret = { a.x / b.x , a.y / b.y , a.z / b.z , a.w / b.w }; return ret; }

static SPIRV_INLINE uniform int4 operator+(uniform int4 a, uniform int b) { uniform int4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE uniform int4 operator+(uniform int4 a, uniform int4 b) { uniform int4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }
static SPIRV_INLINE varying int4 operator+(uniform int4 a, varying int b) { varying int4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE varying int4 operator+(uniform int4 a, varying int4 b) { varying int4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }
static SPIRV_INLINE varying int4 operator+(varying int4 a, uniform int b) { varying int4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE varying int4 operator+(varying int4 a, uniform int4 b) { varying int4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }
static SPIRV_INLINE varying int4 operator+(varying int4 a, varying int b) { varying int4 ret = { a.x + b , a.y + b , a.z + b , a.w + b }; return ret; }
static SPIRV_INLINE varying int4 operator+(varying int4 a, varying int4 b) { varying int4 ret = { a.x + b.x , a.y + b.y , a.z + b.z , a.w + b.w }; return ret; }

static SPIRV_INLINE uniform int4 operator-(uniform int4 a, uniform int b) { uniform int4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE uniform int4 operator-(uniform int4 a, uniform int4 b) { uniform int4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }
static SPIRV_INLINE varying int4 operator-(uniform int4 a, varying int b) { varying int4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE varying int4 operator-(uniform int4 a, varying int4 b) { varying int4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }
static SPIRV_INLINE varying int4 operator-(varying int4 a, uniform int b) { varying int4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE varying int4 operator-(varying int4 a, uniform int4 b) { varying int4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }
static SPIRV_INLINE varying int4 operator-(varying int4 a, varying int b) { varying int4 ret = { a.x - b , a.y - b , a.z - b , a.w - b }; return ret; }
static SPIRV_INLINE varying int4 operator-(varying int4 a, varying int4 b) { varying int4 ret = { a.x - b.x , a.y - b.y , a.z - b.z , a.w - b.w }; return ret; }

//////////////////////////////
// clamp
//////////////////////////////
static SPIRV_INLINE varying float2 clamp(varying float2& a, uniform float2& b, uniform float2& c)
{
    varying float2 ret = { clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y) }; return ret;
}

static SPIRV_INLINE uniform float2 clamp(uniform float2& a, uniform float2& b, uniform float2& c)
{
    uniform float2 ret = { clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y) }; return ret;
}

static SPIRV_INLINE varying float3 clamp(varying float3& a, uniform float3& b, uniform float3& c)
{
    varying float3 ret = { clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y), clamp(a.z, b.z, c.z) }; return ret;
}

static SPIRV_INLINE uniform float3 clamp(uniform float3& a, uniform float3& b, uniform float3& c)
{
    uniform float3 ret = { clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y), clamp(a.z, b.z, c.z) }; return ret;
}

static SPIRV_INLINE varying float4 clamp(varying float4& a, uniform float4& b, uniform float4& c)
{
    varying float4 ret = { clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y), clamp(a.z, b.z, c.z), clamp(a.w, b.w, c.w) }; return ret;
}

static SPIRV_INLINE uniform float4 clamp(uniform float4& a, uniform float4& b, uniform float4& c)
{
    uniform float4 ret = { clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y), clamp(a.z, b.z, c.z), clamp(a.w, b.w, c.w) }; return ret;
}

//////////////////////////////
// mix
//////////////////////////////
static SPIRV_INLINE varying float mix(varying float a, varying float b, varying float c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float mix(uniform float a, varying float b, varying float c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float mix(varying float a, uniform float b, varying float c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float mix(varying float a, varying float b, uniform float c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE uniform float mix(uniform float a, uniform float b, uniform float c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float2 mix(varying float2& a, varying float2& b, varying float2& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float2 mix(uniform float2& a, varying float2& b, varying float2& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float2 mix(varying float2& a, uniform float2& b, varying float2& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float2 mix(varying float2& a, varying float2& b, uniform float2& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE uniform float2 mix(uniform float2& a, uniform float2& b, uniform float2& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float3 mix(varying float3& a, varying float3& b, varying float3& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float3 mix(uniform float3& a, varying float3& b, varying float3& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float3 mix(varying float3& a, uniform float3& b, varying float3& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float3 mix(varying float3& a, varying float3& b, uniform float3& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE uniform float3 mix(uniform float3& a, uniform float3& b, uniform float3& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float4 mix(varying float4& a, varying float4& b, varying float4& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float4 mix(uniform float4& a, varying float4& b, varying float4& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float4 mix(varying float4& a, uniform float4& b, varying float4& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE varying float4 mix(varying float4& a, varying float4& b, uniform float4& c)
{
    return a + c * (b - a);
}

static SPIRV_INLINE uniform float4 mix(uniform float4& a, uniform float4& b, uniform float4& c)
{
    return a + c * (b - a);
}

//////////////////////////////
// fma
//////////////////////////////
static SPIRV_INLINE varying float fma(varying float a, varying float b, varying float c)
{
    return a * b + c;
}

static SPIRV_INLINE uniform float fma(uniform float a, uniform float b, uniform float c)
{
    return a * b + c;
}

static SPIRV_INLINE varying float2 fma(varying float2& a, varying float2& b, varying float2& c)
{
    return a * b + c;
}

static SPIRV_INLINE uniform float2 fma(uniform float2& a, uniform float2& b, uniform float2& c)
{
    return a * b + c;
}

static SPIRV_INLINE varying float3 fma(varying float3& a, varying float3& b, varying float3& c)
{
    return a * b + c;
}

static SPIRV_INLINE uniform float3 fma(uniform float3& a, uniform float3& b, uniform float3& c)
{
    return a * b + c;
}

static SPIRV_INLINE varying float4 fma(varying float4& a, varying float4& b, varying float4& c)
{
    return a * b + c;
}

static SPIRV_INLINE uniform float4 fma(uniform float4& a, uniform float4& b, uniform float4& c)
{
    return a * b + c;
}

//////////////////////////////
// smoothstep
//////////////////////////////
static SPIRV_INLINE varying float smoothstep(varying float a, varying float b, varying float c)
{
    varying float t = clamp((c - a) / (b - a), 0.0f, 1.0f);
    return t * t * (3.0f - 2.0f * t);
}

static SPIRV_INLINE uniform float smoothstep(uniform float a, uniform float b, uniform float c)
{
    uniform float t = clamp((c - a) / (b - a), 0.0f, 1.0f);
    return t * t * (3.0f - 2.0f * t);
}

//////////////////////////////
// smoothstep
//////////////////////////////
static SPIRV_INLINE varying float2 smoothstep(varying float2& a, varying float2& b, varying float2& c)
{
    varying float2 ret = { smoothstep(a.x, b.x, c.x), smoothstep(a.y, b.y, c.y) }; return ret;
}

static SPIRV_INLINE uniform float2 smoothstep(uniform float2& a, uniform float2& b, uniform float2& c)
{
    uniform float2 ret = { smoothstep(a.x, b.x, c.x), smoothstep(a.y, b.y, c.y) }; return ret;
}

static SPIRV_INLINE varying float3 smoothstep(varying float3& a, varying float3& b, varying float3& c)
{
    varying float3 ret = { smoothstep(a.x, b.x, c.x), smoothstep(a.y, b.y, c.y), smoothstep(a.z, b.z, c.z) }; return ret;
}

static SPIRV_INLINE uniform float3 smoothstep(uniform float3& a, uniform float3& b, uniform float3& c)
{
    uniform float3 ret = { smoothstep(a.x, b.x, c.x), smoothstep(a.y, b.y, c.y), smoothstep(a.z, b.z, c.z) }; return ret;
}

static SPIRV_INLINE varying float4 smoothstep(varying float4& a, varying float4& b, varying float4& c)
{
    varying float4 ret = { smoothstep(a.x, b.x, c.x), smoothstep(a.y, b.y, c.y), smoothstep(a.z, b.z, c.z), smoothstep(a.w, b.w, c.w) }; return ret;
}

static SPIRV_INLINE uniform float4 smoothstep(uniform float4& a, uniform float4& b, uniform float4& c)
{
    uniform float4 ret = { smoothstep(a.x, b.x, c.x), smoothstep(a.y, b.y, c.y), smoothstep(a.z, b.z, c.z), smoothstep(a.w, b.w, c.w) }; return ret;
}

//////////////////////////////
// dot
//////////////////////////////
static SPIRV_INLINE varying float dot(varying float2& a, varying float2& b)
{
    return a.x * b.x + a.y * b.y;
}

static SPIRV_INLINE varying float dot(varying float2& a, uniform float2& b)
{
    return a.x * b.x + a.y * b.y;
}

static SPIRV_INLINE varying float dot(uniform float2& a, varying float2& b)
{
    return a.x * b.x + a.y * b.y;
}

static SPIRV_INLINE uniform float dot(uniform float2& a, uniform float2& b)
{
    return a.x * b.x + a.y * b.y;
}

static SPIRV_INLINE varying float dot(varying float3& a, varying float3& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

static SPIRV_INLINE varying float dot(varying float3& a, uniform float3& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

static SPIRV_INLINE varying float dot(uniform float3& a, varying float3& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

static SPIRV_INLINE uniform float dot(uniform float3& a, uniform float3& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

static SPIRV_INLINE varying float dot(varying float4& a, varying float4& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

static SPIRV_INLINE varying float dot(varying float4& a, uniform float4& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

static SPIRV_INLINE varying float dot(uniform float4& a, varying float4& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

static SPIRV_INLINE uniform float dot(uniform float4& a, uniform float4& b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

//////////////////////////////
// reflect
//////////////////////////////
static SPIRV_INLINE varying float2 reflect(varying float2& a, varying float2& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float2 reflect(varying float2& a, uniform float2& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float2 reflect(uniform float2& a, varying float2& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE uniform float2 reflect(uniform float2& a, uniform float2& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float3 reflect(varying float3& a, varying float3& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float3 reflect(varying float3& a, uniform float3& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float3 reflect(uniform float3& a, varying float3& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE uniform float3 reflect(uniform float3& a, uniform float3& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float4 reflect(varying float4& a, varying float4& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float4 reflect(varying float4& a, uniform float4& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE varying float4 reflect(uniform float4& a, varying float4& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

static SPIRV_INLINE uniform float4 reflect(uniform float4& a, uniform float4& b)
{
    return a - b * (dot(a, b) * 2.0f);
}

//////////////////////////////
// min
//////////////////////////////
static SPIRV_INLINE varying float min(varying float a, uniform float b)
{
    return min(to_varying(a), to_varying(b));
}

static SPIRV_INLINE varying float min(uniform float a, varying float b)
{
    return min(to_varying(a), to_varying(b));
}

//////////////////////////////
// min
//////////////////////////////
static SPIRV_INLINE varying float2 min(varying float2& a, varying float2& b)
{
    varying float2 ret = { min(a.x, b.x), min(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 min(varying float2& a, uniform float2& b)
{
    varying float2 ret = { min(a.x, b.x), min(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 min(uniform float2& a, varying float2& b)
{
    varying float2 ret = { min(a.x, b.x), min(a.y, b.y) }; return ret;
}

static SPIRV_INLINE uniform float2 min(uniform float2& a, uniform float2& b)
{
    uniform float2 ret = { min(a.x, b.x), min(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float3 min(varying float3& a, varying float3& b)
{
    varying float3 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 min(varying float3& a, uniform float3& b)
{
    varying float3 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 min(uniform float3& a, varying float3& b)
{
    varying float3 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z) }; return ret;
}

static SPIRV_INLINE uniform float3 min(uniform float3& a, uniform float3& b)
{
    uniform float3 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float4 min(varying float4& a, varying float4& b)
{
    varying float4 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 min(varying float4& a, uniform float4& b)
{
    varying float4 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 min(uniform float4& a, varying float4& b)
{
    varying float4 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w) }; return ret;
}

static SPIRV_INLINE uniform float4 min(uniform float4& a, uniform float4& b)
{
    uniform float4 ret = { min(a.x, b.x), min(a.y, b.y), min(a.z, b.z), min(a.w, b.w) }; return ret;
}

//////////////////////////////
// max
//////////////////////////////
static SPIRV_INLINE varying float max(varying float a, uniform float b)
{
    return max(to_varying(a), to_varying(b));
}

static SPIRV_INLINE varying float max(uniform float a, varying float b)
{
    return max(to_varying(a), to_varying(b));
}

//////////////////////////////
// max
//////////////////////////////
static SPIRV_INLINE varying float2 max(varying float2& a, varying float2& b)
{
    varying float2 ret = { max(a.x, b.x), max(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 max(varying float2& a, uniform float2& b)
{
    varying float2 ret = { max(a.x, b.x), max(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 max(uniform float2& a, varying float2& b)
{
    varying float2 ret = { max(a.x, b.x), max(a.y, b.y) }; return ret;
}

static SPIRV_INLINE uniform float2 max(uniform float2& a, uniform float2& b)
{
    uniform float2 ret = { max(a.x, b.x), max(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float3 max(varying float3& a, varying float3& b)
{
    varying float3 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 max(varying float3& a, uniform float3& b)
{
    varying float3 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 max(uniform float3& a, varying float3& b)
{
    varying float3 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z) }; return ret;
}

static SPIRV_INLINE uniform float3 max(uniform float3& a, uniform float3& b)
{
    uniform float3 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float4 max(varying float4& a, varying float4& b)
{
    varying float4 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 max(varying float4& a, uniform float4& b)
{
    varying float4 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 max(uniform float4& a, varying float4& b)
{
    varying float4 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w) }; return ret;
}

static SPIRV_INLINE uniform float4 max(uniform float4& a, uniform float4& b)
{
    uniform float4 ret = { max(a.x, b.x), max(a.y, b.y), max(a.z, b.z), max(a.w, b.w) }; return ret;
}

//////////////////////////////
// step
//////////////////////////////
static SPIRV_INLINE varying float step(varying float a, varying float b)
{
    return to_varying(b) >= to_varying(a) ? 1.0f : 0.0f;
}

static SPIRV_INLINE varying float step(varying float a, uniform float b)
{
    return to_varying(b) >= to_varying(a) ? 1.0f : 0.0f;
}

static SPIRV_INLINE varying float step(uniform float a, varying float b)
{
    return to_varying(b) >= to_varying(a) ? 1.0f : 0.0f;
}

static SPIRV_INLINE uniform float step(uniform float a, uniform float b)
{
    return b >= a ? 1.0f : 0.0f;
}

//////////////////////////////
// step
//////////////////////////////
static SPIRV_INLINE varying float2 step(varying float2& a, varying float2& b)
{
    varying float2 ret = { step(a.x, b.x), step(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 step(varying float2& a, uniform float2& b)
{
    varying float2 ret = { step(a.x, b.x), step(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 step(uniform float2& a, varying float2& b)
{
    varying float2 ret = { step(a.x, b.x), step(a.y, b.y) }; return ret;
}

static SPIRV_INLINE uniform float2 step(uniform float2& a, uniform float2& b)
{
    uniform float2 ret = { step(a.x, b.x), step(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float3 step(varying float3& a, varying float3& b)
{
    varying float3 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 step(varying float3& a, uniform float3& b)
{
    varying float3 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 step(uniform float3& a, varying float3& b)
{
    varying float3 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z) }; return ret;
}

static SPIRV_INLINE uniform float3 step(uniform float3& a, uniform float3& b)
{
    uniform float3 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float4 step(varying float4& a, varying float4& b)
{
    varying float4 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z), step(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 step(varying float4& a, uniform float4& b)
{
    varying float4 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z), step(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 step(uniform float4& a, varying float4& b)
{
    varying float4 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z), step(a.w, b.w) }; return ret;
}

static SPIRV_INLINE uniform float4 step(uniform float4& a, uniform float4& b)
{
    uniform float4 ret = { step(a.x, b.x), step(a.y, b.y), step(a.z, b.z), step(a.w, b.w) }; return ret;
}

//////////////////////////////
// pow
//////////////////////////////
static SPIRV_INLINE varying float2 pow(varying float2& a, varying float2& b)
{
    varying float2 ret = { pow(a.x, b.x), pow(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 pow(varying float2& a, uniform float2& b)
{
    varying float2 ret = { pow(a.x, b.x), pow(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 pow(uniform float2& a, varying float2& b)
{
    varying float2 ret = { pow(a.x, b.x), pow(a.y, b.y) }; return ret;
}

static SPIRV_INLINE uniform float2 pow(uniform float2& a, uniform float2& b)
{
    uniform float2 ret = { pow(a.x, b.x), pow(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float3 pow(varying float3& a, varying float3& b)
{
    varying float3 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 pow(varying float3& a, uniform float3& b)
{
    varying float3 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 pow(uniform float3& a, varying float3& b)
{
    varying float3 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z) }; return ret;
}

static SPIRV_INLINE uniform float3 pow(uniform float3& a, uniform float3& b)
{
    uniform float3 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float4 pow(varying float4& a, varying float4& b)
{
    varying float4 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z), pow(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 pow(varying float4& a, uniform float4& b)
{
    varying float4 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z), pow(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 pow(uniform float4& a, varying float4& b)
{
    varying float4 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z), pow(a.w, b.w) }; return ret;
}

static SPIRV_INLINE uniform float4 pow(uniform float4& a, uniform float4& b)
{
    uniform float4 ret = { pow(a.x, b.x), pow(a.y, b.y), pow(a.z, b.z), pow(a.w, b.w) }; return ret;
}

//////////////////////////////
// mod
//////////////////////////////
static SPIRV_INLINE varying float mod(varying float a, varying float b)
{
    varying float va = a;
    varying float vb = b;
    return va - vb * floor(va / vb);
}

static SPIRV_INLINE varying float mod(varying float a, uniform float b)
{
    varying float va = a;
    varying float vb = b;
    return va - vb * floor(va / vb);
}

static SPIRV_INLINE varying float mod(uniform float a, varying float b)
{
    varying float va = a;
    varying float vb = b;
    return va - vb * floor(va / vb);
}

static SPIRV_INLINE uniform float mod(uniform float a, uniform float b)
{
    return a - b * floor(a / b);
}

//////////////////////////////
// mod
//////////////////////////////
static SPIRV_INLINE varying float2 mod(varying float2& a, varying float2& b)
{
    varying float2 ret = { mod(a.x, b.x), mod(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 mod(varying float2& a, uniform float2& b)
{
    varying float2 ret = { mod(a.x, b.x), mod(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float2 mod(uniform float2& a, varying float2& b)
{
    varying float2 ret = { mod(a.x, b.x), mod(a.y, b.y) }; return ret;
}

static SPIRV_INLINE uniform float2 mod(uniform float2& a, uniform float2& b)
{
    uniform float2 ret = { mod(a.x, b.x), mod(a.y, b.y) }; return ret;
}

static SPIRV_INLINE varying float3 mod(varying float3& a, varying float3& b)
{
    varying float3 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 mod(varying float3& a, uniform float3& b)
{
    varying float3 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float3 mod(uniform float3& a, varying float3& b)
{
    varying float3 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z) }; return ret;
}

static SPIRV_INLINE uniform float3 mod(uniform float3& a, uniform float3& b)
{
    uniform float3 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z) }; return ret;
}

static SPIRV_INLINE varying float4 mod(varying float4& a, varying float4& b)
{
    varying float4 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z), mod(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 mod(varying float4& a, uniform float4& b)
{
    varying float4 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z), mod(a.w, b.w) }; return ret;
}

static SPIRV_INLINE varying float4 mod(uniform float4& a, varying float4& b)
{
    varying float4 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z), mod(a.w, b.w) }; return ret;
}

static SPIRV_INLINE uniform float4 mod(uniform float4& a, uniform float4& b)
{
    uniform float4 ret = { mod(a.x, b.x), mod(a.y, b.y), mod(a.z, b.z), mod(a.w, b.w) }; return ret;
}

//////////////////////////////
// notEqual
//////////////////////////////
static SPIRV_INLINE varying bool notEqual(varying float a, varying float b)
{
    return a != b;
}

static SPIRV_INLINE varying bool notEqual(varying float a, uniform float b)
{
    return a != b;
}

static SPIRV_INLINE varying bool notEqual(uniform float a, varying float b)
{
    return a != b;
}

static SPIRV_INLINE uniform bool notEqual(uniform float a, uniform float b)
{
    return a != b;
}

static SPIRV_INLINE varying bool2 notEqual(varying float2& a, varying float2& b)
{
    varying bool2 ret = { a.x != b.x, a.y != b.y }; return ret;
}

static SPIRV_INLINE varying bool2 notEqual(varying float2& a, uniform float2& b)
{
    varying bool2 ret = { a.x != b.x, a.y != b.y }; return ret;
}

static SPIRV_INLINE varying bool2 notEqual(uniform float2& a, varying float2& b)
{
    varying bool2 ret = { a.x != b.x, a.y != b.y }; return ret;
}

static SPIRV_INLINE uniform bool2 notEqual(uniform float2& a, uniform float2& b)
{
    uniform bool2 ret = { a.x != b.x, a.y != b.y }; return ret;
}

static SPIRV_INLINE varying bool3 notEqual(varying float3& a, varying float3& b)
{
    varying bool3 ret = { a.x != b.x, a.y != b.y, a.z != b.z }; return ret;
}

static SPIRV_INLINE varying bool3 notEqual(varying float3& a, uniform float3& b)
{
    varying bool3 ret = { a.x != b.x, a.y != b.y, a.z != b.z }; return ret;
}

static SPIRV_INLINE varying bool3 notEqual(uniform float3& a, varying float3& b)
{
    varying bool3 ret = { a.x != b.x, a.y != b.y, a.z != b.z }; return ret;
}

static SPIRV_INLINE uniform bool3 notEqual(uniform float3& a, uniform float3& b)
{
    uniform bool3 ret = { a.x != b.x, a.y != b.y, a.z != b.z }; return ret;
}

static SPIRV_INLINE varying bool4 notEqual(varying float4& a, varying float4& b)
{
    varying bool4 ret = { a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w }; return ret;
}

static SPIRV_INLINE varying bool4 notEqual(varying float4& a, uniform float4& b)
{
    varying bool4 ret = { a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w }; return ret;
}

static SPIRV_INLINE varying bool4 notEqual(uniform float4& a, varying float4& b)
{
    varying bool4 ret = { a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w }; return ret;
}

static SPIRV_INLINE uniform bool4 notEqual(uniform float4& a, uniform float4& b)
{
    uniform bool4 ret = { a.x != b.x, a.y != b.y, a.z != b.z, a.w != b.w }; return ret;
}

//////////////////////////////
// cross
//////////////////////////////
static SPIRV_INLINE varying float3 cross(varying float3& a, varying float3& b)
{
    varying float3 ret;
    ret.x = (a.y * b.z) - (a.z * b.y);
    ret.y = (a.z * b.x) - (a.x * b.z);
    ret.z = (a.x * b.y) - (a.y * b.x);
    return ret;
}

static SPIRV_INLINE varying float3 cross(varying float3& a, uniform float3& b)
{
    varying float3 ret;
    ret.x = (a.y * b.z) - (a.z * b.y);
    ret.y = (a.z * b.x) - (a.x * b.z);
    ret.z = (a.x * b.y) - (a.y * b.x);
    return ret;
}

static SPIRV_INLINE varying float3 cross(uniform float3& a, varying float3& b)
{
    varying float3 ret;
    ret.x = (a.y * b.z) - (a.z * b.y);
    ret.y = (a.z * b.x) - (a.x * b.z);
    ret.z = (a.x * b.y) - (a.y * b.x);
    return ret;
}

static SPIRV_INLINE uniform float3 cross(uniform float3& a, uniform float3& b)
{
    uniform float3 ret;
    ret.x = (a.y * b.z) - (a.z * b.y);
    ret.y = (a.z * b.x) - (a.x * b.z);
    ret.z = (a.x * b.y) - (a.y * b.x);
    return ret;
}

//////////////////////////////
// length
//////////////////////////////
static SPIRV_INLINE varying float length(varying float2& a)
{
    return sqrt(dot(a, a));
}

static SPIRV_INLINE uniform float length(uniform float2& a)
{
    return sqrt(dot(a, a));
}

static SPIRV_INLINE varying float length(varying float3& a)
{
    return sqrt(dot(a, a));
}

static SPIRV_INLINE uniform float length(uniform float3& a)
{
    return sqrt(dot(a, a));
}

static SPIRV_INLINE varying float length(varying float4& a)
{
    return sqrt(dot(a, a));
}

static SPIRV_INLINE uniform float length(uniform float4& a)
{
    return sqrt(dot(a, a));
}

//////////////////////////////
// abs
//////////////////////////////
static SPIRV_INLINE varying float2 abs(varying float2& a)
{
    varying float2 ret = { abs(a.x), abs(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 abs(uniform float2& a)
{
    uniform float2 ret = { abs(a.x), abs(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 abs(varying float3& a)
{
    varying float3 ret = { abs(a.x), abs(a.y), abs(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 abs(uniform float3& a)
{
    uniform float3 ret = { abs(a.x), abs(a.y), abs(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 abs(varying float4& a)
{
    varying float4 ret = { abs(a.x), abs(a.y), abs(a.z), abs(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 abs(uniform float4& a)
{
    uniform float4 ret = { abs(a.x), abs(a.y), abs(a.z), abs(a.w) }; return ret;
}

//////////////////////////////
// acos
//////////////////////////////
static SPIRV_INLINE varying float2 acos(varying float2& a)
{
    varying float2 ret = { acos(a.x), acos(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 acos(uniform float2& a)
{
    uniform float2 ret = { acos(a.x), acos(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 acos(varying float3& a)
{
    varying float3 ret = { acos(a.x), acos(a.y), acos(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 acos(uniform float3& a)
{
    uniform float3 ret = { acos(a.x), acos(a.y), acos(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 acos(varying float4& a)
{
    varying float4 ret = { acos(a.x), acos(a.y), acos(a.z), acos(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 acos(uniform float4& a)
{
    uniform float4 ret = { acos(a.x), acos(a.y), acos(a.z), acos(a.w) }; return ret;
}

//////////////////////////////
// asin
//////////////////////////////
static SPIRV_INLINE varying float2 asin(varying float2& a)
{
    varying float2 ret = { asin(a.x), asin(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 asin(uniform float2& a)
{
    uniform float2 ret = { asin(a.x), asin(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 asin(varying float3& a)
{
    varying float3 ret = { asin(a.x), asin(a.y), asin(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 asin(uniform float3& a)
{
    uniform float3 ret = { asin(a.x), asin(a.y), asin(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 asin(varying float4& a)
{
    varying float4 ret = { asin(a.x), asin(a.y), asin(a.z), asin(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 asin(uniform float4& a)
{
    uniform float4 ret = { asin(a.x), asin(a.y), asin(a.z), asin(a.w) }; return ret;
}

//////////////////////////////
// atan
//////////////////////////////
static SPIRV_INLINE varying float2 atan(varying float2& a)
{
    varying float2 ret = { atan(a.x), atan(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 atan(uniform float2& a)
{
    uniform float2 ret = { atan(a.x), atan(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 atan(varying float3& a)
{
    varying float3 ret = { atan(a.x), atan(a.y), atan(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 atan(uniform float3& a)
{
    uniform float3 ret = { atan(a.x), atan(a.y), atan(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 atan(varying float4& a)
{
    varying float4 ret = { atan(a.x), atan(a.y), atan(a.z), atan(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 atan(uniform float4& a)
{
    uniform float4 ret = { atan(a.x), atan(a.y), atan(a.z), atan(a.w) }; return ret;
}

//////////////////////////////
// cos
//////////////////////////////
static SPIRV_INLINE varying float2 cos(varying float2& a)
{
    varying float2 ret = { cos(a.x), cos(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 cos(uniform float2& a)
{
    uniform float2 ret = { cos(a.x), cos(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 cos(varying float3& a)
{
    varying float3 ret = { cos(a.x), cos(a.y), cos(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 cos(uniform float3& a)
{
    uniform float3 ret = { cos(a.x), cos(a.y), cos(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 cos(varying float4& a)
{
    varying float4 ret = { cos(a.x), cos(a.y), cos(a.z), cos(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 cos(uniform float4& a)
{
    uniform float4 ret = { cos(a.x), cos(a.y), cos(a.z), cos(a.w) }; return ret;
}

//////////////////////////////
// sin
//////////////////////////////
static SPIRV_INLINE varying float2 sin(varying float2& a)
{
    varying float2 ret = { sin(a.x), sin(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 sin(uniform float2& a)
{
    uniform float2 ret = { sin(a.x), sin(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 sin(varying float3& a)
{
    varying float3 ret = { sin(a.x), sin(a.y), sin(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 sin(uniform float3& a)
{
    uniform float3 ret = { sin(a.x), sin(a.y), sin(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 sin(varying float4& a)
{
    varying float4 ret = { sin(a.x), sin(a.y), sin(a.z), sin(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 sin(uniform float4& a)
{
    uniform float4 ret = { sin(a.x), sin(a.y), sin(a.z), sin(a.w) }; return ret;
}

//////////////////////////////
// tan
//////////////////////////////
static SPIRV_INLINE varying float2 tan(varying float2& a)
{
    varying float2 ret = { tan(a.x), tan(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 tan(uniform float2& a)
{
    uniform float2 ret = { tan(a.x), tan(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 tan(varying float3& a)
{
    varying float3 ret = { tan(a.x), tan(a.y), tan(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 tan(uniform float3& a)
{
    uniform float3 ret = { tan(a.x), tan(a.y), tan(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 tan(varying float4& a)
{
    varying float4 ret = { tan(a.x), tan(a.y), tan(a.z), tan(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 tan(uniform float4& a)
{
    uniform float4 ret = { tan(a.x), tan(a.y), tan(a.z), tan(a.w) }; return ret;
}

//////////////////////////////
// floor
//////////////////////////////
static SPIRV_INLINE varying float2 floor(varying float2& a)
{
    varying float2 ret = { floor(a.x), floor(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 floor(uniform float2& a)
{
    uniform float2 ret = { floor(a.x), floor(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 floor(varying float3& a)
{
    varying float3 ret = { floor(a.x), floor(a.y), floor(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 floor(uniform float3& a)
{
    uniform float3 ret = { floor(a.x), floor(a.y), floor(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 floor(varying float4& a)
{
    varying float4 ret = { floor(a.x), floor(a.y), floor(a.z), floor(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 floor(uniform float4& a)
{
    uniform float4 ret = { floor(a.x), floor(a.y), floor(a.z), floor(a.w) }; return ret;
}

//////////////////////////////
// round
//////////////////////////////
static SPIRV_INLINE varying float2 round(varying float2& a)
{
    varying float2 ret = { round(a.x), round(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 round(uniform float2& a)
{
    uniform float2 ret = { round(a.x), round(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 round(varying float3& a)
{
    varying float3 ret = { round(a.x), round(a.y), round(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 round(uniform float3& a)
{
    uniform float3 ret = { round(a.x), round(a.y), round(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 round(varying float4& a)
{
    varying float4 ret = { round(a.x), round(a.y), round(a.z), round(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 round(uniform float4& a)
{
    uniform float4 ret = { round(a.x), round(a.y), round(a.z), round(a.w) }; return ret;
}

//////////////////////////////
// ceil
//////////////////////////////
static SPIRV_INLINE varying float2 ceil(varying float2& a)
{
    varying float2 ret = { ceil(a.x), ceil(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 ceil(uniform float2& a)
{
    uniform float2 ret = { ceil(a.x), ceil(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 ceil(varying float3& a)
{
    varying float3 ret = { ceil(a.x), ceil(a.y), ceil(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 ceil(uniform float3& a)
{
    uniform float3 ret = { ceil(a.x), ceil(a.y), ceil(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 ceil(varying float4& a)
{
    varying float4 ret = { ceil(a.x), ceil(a.y), ceil(a.z), ceil(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 ceil(uniform float4& a)
{
    uniform float4 ret = { ceil(a.x), ceil(a.y), ceil(a.z), ceil(a.w) }; return ret;
}

//////////////////////////////
// log
//////////////////////////////
static SPIRV_INLINE varying float2 log(varying float2& a)
{
    varying float2 ret = { log(a.x), log(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 log(uniform float2& a)
{
    uniform float2 ret = { log(a.x), log(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 log(varying float3& a)
{
    varying float3 ret = { log(a.x), log(a.y), log(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 log(uniform float3& a)
{
    uniform float3 ret = { log(a.x), log(a.y), log(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 log(varying float4& a)
{
    varying float4 ret = { log(a.x), log(a.y), log(a.z), log(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 log(uniform float4& a)
{
    uniform float4 ret = { log(a.x), log(a.y), log(a.z), log(a.w) }; return ret;
}

//////////////////////////////
// log2
//////////////////////////////
static SPIRV_INLINE varying float log2(varying float a)
{
    return log(a) / log(2.0f);
}

static SPIRV_INLINE uniform float log2(uniform float a)
{
    return log(a) / log(2.0f);
}

//////////////////////////////
// log2
//////////////////////////////
static SPIRV_INLINE varying float2 log2(varying float2& a)
{
    varying float2 ret = { log2(a.x), log2(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 log2(uniform float2& a)
{
    uniform float2 ret = { log2(a.x), log2(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 log2(varying float3& a)
{
    varying float3 ret = { log2(a.x), log2(a.y), log2(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 log2(uniform float3& a)
{
    uniform float3 ret = { log2(a.x), log2(a.y), log2(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 log2(varying float4& a)
{
    varying float4 ret = { log2(a.x), log2(a.y), log2(a.z), log2(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 log2(uniform float4& a)
{
    uniform float4 ret = { log2(a.x), log2(a.y), log2(a.z), log2(a.w) }; return ret;
}

//////////////////////////////
// rcp
//////////////////////////////
static SPIRV_INLINE varying float2 rcp(varying float2& a)
{
    varying float2 ret = { rcp(a.x), rcp(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 rcp(uniform float2& a)
{
    uniform float2 ret = { rcp(a.x), rcp(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 rcp(varying float3& a)
{
    varying float3 ret = { rcp(a.x), rcp(a.y), rcp(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 rcp(uniform float3& a)
{
    uniform float3 ret = { rcp(a.x), rcp(a.y), rcp(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 rcp(varying float4& a)
{
    varying float4 ret = { rcp(a.x), rcp(a.y), rcp(a.z), rcp(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 rcp(uniform float4& a)
{
    uniform float4 ret = { rcp(a.x), rcp(a.y), rcp(a.z), rcp(a.w) }; return ret;
}

//////////////////////////////
// sqrt
//////////////////////////////
static SPIRV_INLINE varying float2 sqrt(varying float2& a)
{
    varying float2 ret = { sqrt(a.x), sqrt(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 sqrt(uniform float2& a)
{
    uniform float2 ret = { sqrt(a.x), sqrt(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 sqrt(varying float3& a)
{
    varying float3 ret = { sqrt(a.x), sqrt(a.y), sqrt(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 sqrt(uniform float3& a)
{
    uniform float3 ret = { sqrt(a.x), sqrt(a.y), sqrt(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 sqrt(varying float4& a)
{
    varying float4 ret = { sqrt(a.x), sqrt(a.y), sqrt(a.z), sqrt(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 sqrt(uniform float4& a)
{
    uniform float4 ret = { sqrt(a.x), sqrt(a.y), sqrt(a.z), sqrt(a.w) }; return ret;
}

//////////////////////////////
// rsqrt
//////////////////////////////
static SPIRV_INLINE varying float2 rsqrt(varying float2& a)
{
    varying float2 ret = { rsqrt(a.x), rsqrt(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 rsqrt(uniform float2& a)
{
    uniform float2 ret = { rsqrt(a.x), rsqrt(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 rsqrt(varying float3& a)
{
    varying float3 ret = { rsqrt(a.x), rsqrt(a.y), rsqrt(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 rsqrt(uniform float3& a)
{
    uniform float3 ret = { rsqrt(a.x), rsqrt(a.y), rsqrt(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 rsqrt(varying float4& a)
{
    varying float4 ret = { rsqrt(a.x), rsqrt(a.y), rsqrt(a.z), rsqrt(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 rsqrt(uniform float4& a)
{
    uniform float4 ret = { rsqrt(a.x), rsqrt(a.y), rsqrt(a.z), rsqrt(a.w) }; return ret;
}

//////////////////////////////
// exp
//////////////////////////////
static SPIRV_INLINE varying float2 exp(varying float2& a)
{
    varying float2 ret = { exp(a.x), exp(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 exp(uniform float2& a)
{
    uniform float2 ret = { exp(a.x), exp(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 exp(varying float3& a)
{
    varying float3 ret = { exp(a.x), exp(a.y), exp(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 exp(uniform float3& a)
{
    uniform float3 ret = { exp(a.x), exp(a.y), exp(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 exp(varying float4& a)
{
    varying float4 ret = { exp(a.x), exp(a.y), exp(a.z), exp(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 exp(uniform float4& a)
{
    uniform float4 ret = { exp(a.x), exp(a.y), exp(a.z), exp(a.w) }; return ret;
}

//////////////////////////////
// cosh
//////////////////////////////
static SPIRV_INLINE varying float cosh(varying float a)
{
    return (exp(a) + exp(-a)) / 2.0f;
}

static SPIRV_INLINE uniform float cosh(uniform float a)
{
    return (exp(a) + exp(-a)) / 2.0f;
}

//////////////////////////////
// cosh
//////////////////////////////
static SPIRV_INLINE varying float2 cosh(varying float2& a)
{
    varying float2 ret = { cosh(a.x), cosh(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 cosh(uniform float2& a)
{
    uniform float2 ret = { cosh(a.x), cosh(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 cosh(varying float3& a)
{
    varying float3 ret = { cosh(a.x), cosh(a.y), cosh(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 cosh(uniform float3& a)
{
    uniform float3 ret = { cosh(a.x), cosh(a.y), cosh(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 cosh(varying float4& a)
{
    varying float4 ret = { cosh(a.x), cosh(a.y), cosh(a.z), cosh(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 cosh(uniform float4& a)
{
    uniform float4 ret = { cosh(a.x), cosh(a.y), cosh(a.z), cosh(a.w) }; return ret;
}

//////////////////////////////
// sinh
//////////////////////////////
static SPIRV_INLINE varying float sinh(varying float a)
{
    return (exp(a) - exp(-a)) / 2.0f;
}

static SPIRV_INLINE uniform float sinh(uniform float a)
{
    return (exp(a) - exp(-a)) / 2.0f;
}

//////////////////////////////
// sinh
//////////////////////////////
static SPIRV_INLINE varying float2 sinh(varying float2& a)
{
    varying float2 ret = { sinh(a.x), sinh(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 sinh(uniform float2& a)
{
    uniform float2 ret = { sinh(a.x), sinh(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 sinh(varying float3& a)
{
    varying float3 ret = { sinh(a.x), sinh(a.y), sinh(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 sinh(uniform float3& a)
{
    uniform float3 ret = { sinh(a.x), sinh(a.y), sinh(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 sinh(varying float4& a)
{
    varying float4 ret = { sinh(a.x), sinh(a.y), sinh(a.z), sinh(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 sinh(uniform float4& a)
{
    uniform float4 ret = { sinh(a.x), sinh(a.y), sinh(a.z), sinh(a.w) }; return ret;
}

//////////////////////////////
// tanh
//////////////////////////////
static SPIRV_INLINE varying float tanh(varying float a)
{
    return sinh(a) / cosh(a);
}

static SPIRV_INLINE uniform float tanh(uniform float a)
{
    return sinh(a) / cosh(a);
}

//////////////////////////////
// tanh
//////////////////////////////
static SPIRV_INLINE varying float2 tanh(varying float2& a)
{
    varying float2 ret = { tanh(a.x), tanh(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 tanh(uniform float2& a)
{
    uniform float2 ret = { tanh(a.x), tanh(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 tanh(varying float3& a)
{
    varying float3 ret = { tanh(a.x), tanh(a.y), tanh(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 tanh(uniform float3& a)
{
    uniform float3 ret = { tanh(a.x), tanh(a.y), tanh(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 tanh(varying float4& a)
{
    varying float4 ret = { tanh(a.x), tanh(a.y), tanh(a.z), tanh(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 tanh(uniform float4& a)
{
    uniform float4 ret = { tanh(a.x), tanh(a.y), tanh(a.z), tanh(a.w) }; return ret;
}

//////////////////////////////
// degrees
//////////////////////////////
static SPIRV_INLINE varying float degrees(varying float a)
{
    return (180.0f * a) / PI;
}

static SPIRV_INLINE uniform float degrees(uniform float a)
{
    return (180.0f * a) / PI;
}

//////////////////////////////
// degrees
//////////////////////////////
static SPIRV_INLINE varying float2 degrees(varying float2& a)
{
    varying float2 ret = { degrees(a.x), degrees(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 degrees(uniform float2& a)
{
    uniform float2 ret = { degrees(a.x), degrees(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 degrees(varying float3& a)
{
    varying float3 ret = { degrees(a.x), degrees(a.y), degrees(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 degrees(uniform float3& a)
{
    uniform float3 ret = { degrees(a.x), degrees(a.y), degrees(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 degrees(varying float4& a)
{
    varying float4 ret = { degrees(a.x), degrees(a.y), degrees(a.z), degrees(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 degrees(uniform float4& a)
{
    uniform float4 ret = { degrees(a.x), degrees(a.y), degrees(a.z), degrees(a.w) }; return ret;
}

//////////////////////////////
// radians
//////////////////////////////
static SPIRV_INLINE varying float radians(varying float a)
{
    return (PI * a) / 180.0f;
}

static SPIRV_INLINE uniform float radians(uniform float a)
{
    return (PI * a) / 180.0f;
}

//////////////////////////////
// radians
//////////////////////////////
static SPIRV_INLINE varying float2 radians(varying float2& a)
{
    varying float2 ret = { radians(a.x), radians(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 radians(uniform float2& a)
{
    uniform float2 ret = { radians(a.x), radians(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 radians(varying float3& a)
{
    varying float3 ret = { radians(a.x), radians(a.y), radians(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 radians(uniform float3& a)
{
    uniform float3 ret = { radians(a.x), radians(a.y), radians(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 radians(varying float4& a)
{
    varying float4 ret = { radians(a.x), radians(a.y), radians(a.z), radians(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 radians(uniform float4& a)
{
    uniform float4 ret = { radians(a.x), radians(a.y), radians(a.z), radians(a.w) }; return ret;
}

//////////////////////////////
// fract
//////////////////////////////
static SPIRV_INLINE varying float fract(varying float a)
{
    return a - floor(a);
}

static SPIRV_INLINE uniform float fract(uniform float a)
{
    return a - floor(a);
}

static SPIRV_INLINE varying float2 fract(varying float2& a)
{
    return a - floor(a);
}

static SPIRV_INLINE uniform float2 fract(uniform float2& a)
{
    return a - floor(a);
}

static SPIRV_INLINE varying float3 fract(varying float3& a)
{
    return a - floor(a);
}

static SPIRV_INLINE uniform float3 fract(uniform float3& a)
{
    return a - floor(a);
}

static SPIRV_INLINE varying float4 fract(varying float4& a)
{
    return a - floor(a);
}

static SPIRV_INLINE uniform float4 fract(uniform float4& a)
{
    return a - floor(a);
}

//////////////////////////////
// normalize
//////////////////////////////
static SPIRV_INLINE varying float2 normalize(varying float2& a)
{
    return a / length(a);
}

static SPIRV_INLINE uniform float2 normalize(uniform float2& a)
{
    return a / length(a);
}

static SPIRV_INLINE varying float3 normalize(varying float3& a)
{
    return a / length(a);
}

static SPIRV_INLINE uniform float3 normalize(uniform float3& a)
{
    return a / length(a);
}

static SPIRV_INLINE varying float4 normalize(varying float4& a)
{
    return a / length(a);
}

static SPIRV_INLINE uniform float4 normalize(uniform float4& a)
{
    return a / length(a);
}

//////////////////////////////
// sign
//////////////////////////////
static SPIRV_INLINE varying float sign(varying float a)
{
    return (a < 0.0f) ? -1 : 1;
}

static SPIRV_INLINE uniform float sign(uniform float a)
{
    return (a < 0.0f) ? -1 : 1;
}

//////////////////////////////
// sign
//////////////////////////////
static SPIRV_INLINE varying float2 sign(varying float2& a)
{
    varying float2 ret = { sign(a.x), sign(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 sign(uniform float2& a)
{
    uniform float2 ret = { sign(a.x), sign(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 sign(varying float3& a)
{
    varying float3 ret = { sign(a.x), sign(a.y), sign(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 sign(uniform float3& a)
{
    uniform float3 ret = { sign(a.x), sign(a.y), sign(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 sign(varying float4& a)
{
    varying float4 ret = { sign(a.x), sign(a.y), sign(a.z), sign(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 sign(uniform float4& a)
{
    uniform float4 ret = { sign(a.x), sign(a.y), sign(a.z), sign(a.w) }; return ret;
}

//////////////////////////////
// exp2
//////////////////////////////
static SPIRV_INLINE varying float exp2(varying float a)
{
    return pow(2.0f, a);
}

static SPIRV_INLINE uniform float exp2(uniform float a)
{
    return pow(2.0f, a);
}

//////////////////////////////
// exp2
//////////////////////////////
static SPIRV_INLINE varying float2 exp2(varying float2& a)
{
    varying float2 ret = { exp2(a.x), exp2(a.y) }; return ret;
}

static SPIRV_INLINE uniform float2 exp2(uniform float2& a)
{
    uniform float2 ret = { exp2(a.x), exp2(a.y) }; return ret;
}

static SPIRV_INLINE varying float3 exp2(varying float3& a)
{
    varying float3 ret = { exp2(a.x), exp2(a.y), exp2(a.z) }; return ret;
}

static SPIRV_INLINE uniform float3 exp2(uniform float3& a)
{
    uniform float3 ret = { exp2(a.x), exp2(a.y), exp2(a.z) }; return ret;
}

static SPIRV_INLINE varying float4 exp2(varying float4& a)
{
    varying float4 ret = { exp2(a.x), exp2(a.y), exp2(a.z), exp2(a.w) }; return ret;
}

static SPIRV_INLINE uniform float4 exp2(uniform float4& a)
{
    uniform float4 ret = { exp2(a.x), exp2(a.y), exp2(a.z), exp2(a.w) }; return ret;
}

//////////////////////////////
// trunc
//////////////////////////////
static SPIRV_INLINE varying int trunc(varying float a)
{
    return (int)floor(a);
}

static SPIRV_INLINE varying int2 trunc(varying float2& a)
{
    varying int2 ret = { trunc(a.x), trunc(a.y) }; return ret;
}

static SPIRV_INLINE varying int3 trunc(varying float3& a)
{
    varying int3 ret = { trunc(a.x), trunc(a.y), trunc(a.z) }; return ret;
}

static SPIRV_INLINE varying int4 trunc(varying float4& a)
{
    varying int4 ret = { trunc(a.x), trunc(a.y), trunc(a.z), trunc(a.w)}; return ret;
}

//////////////////////////////
// all
//////////////////////////////
static SPIRV_INLINE varying bool all(varying bool2& a)
{
    return all(a.x) && all(a.y);
}

static SPIRV_INLINE varying bool all(varying bool3& a)
{
    return all(a.x) && all(a.y) && all(a.z);
}

static SPIRV_INLINE varying bool all(varying bool4& a)
{
    return all(a.x) && all(a.y) && all(a.z) && all(a.w);
}

//////////////////////////////
// any
//////////////////////////////
static SPIRV_INLINE varying bool any(varying bool2& a)
{
    return any(a.x) || any(a.y);
}

static SPIRV_INLINE varying bool any(varying bool3& a)
{
    return any(a.x) || any(a.y) || any(a.z);
}

static SPIRV_INLINE varying bool any(varying bool4& a)
{
    return any(a.x) || any(a.y) || any(a.z) || any(a.w);
}

//////////////////////////////
// distance
//////////////////////////////
static SPIRV_INLINE varying float distance(varying float a, varying float b)
{
    return abs(a - b);
}

static SPIRV_INLINE varying float distance(varying float a, uniform float b)
{
    return abs(a - b);
}

static SPIRV_INLINE varying float distance(uniform float a, varying float b)
{
    return abs(a - b);
}

static SPIRV_INLINE uniform float distance(uniform float a, uniform float b)
{
    return abs(a - b);
}

static SPIRV_INLINE varying float distance(varying float2& a, varying float2& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(varying float2& a, uniform float2& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(uniform float2& a, varying float2& b)
{
    return length(a - b);
}

static SPIRV_INLINE uniform float distance(uniform float2& a, uniform float2& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(varying float3& a, varying float3& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(varying float3& a, uniform float3& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(uniform float3& a, varying float3& b)
{
    return length(a - b);
}

static SPIRV_INLINE uniform float distance(uniform float3& a, uniform float3& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(varying float4& a, varying float4& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(varying float4& a, uniform float4& b)
{
    return length(a - b);
}

static SPIRV_INLINE varying float distance(uniform float4& a, varying float4& b)
{
    return length(a - b);
}

static SPIRV_INLINE uniform float distance(uniform float4& a, uniform float4& b)
{
    return length(a - b);
}


//////////////////////////////
// Atomics
//////////////////////////////
static SPIRV_INLINE varying int atomic_add(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_add_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_add(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_add_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_add(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_add_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_add(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_add_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_subtract(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_subtract_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_subtract(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_subtract_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_subtract(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_subtract_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_subtract(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_subtract_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_min(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_min_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_min(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_min_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_min(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_min_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_min(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_min_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_max(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_max_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_max(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_max_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_max(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_max_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_max(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_max_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_and(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_and_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_and(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_and_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_and(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_and_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_and(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_and_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_or(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_or_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_or(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_or_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_or(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_or_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_or(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_or_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_xor(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_xor_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_xor(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_xor_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_xor(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_xor_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_xor(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_xor_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_swap(uniform int * uniform ptr, varying int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_swap_global(ptr, val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_swap(uniform int * uniform ptr, uniform int value)
{
    uniform int ret[programCount];
    foreach_active(instance)
    {
        ret[instance] = atomic_swap_global(ptr, value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_swap(uniform int * varying vptr, varying int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        uniform int val = extract(value, instance);
        ret[instance] = atomic_swap_global(ptr[instance], val);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}

static SPIRV_INLINE varying int atomic_swap(uniform int * varying vptr, uniform int value)
{
    uniform int ret[programCount];
    uniform int ** uniform ptr = ((uniform int ** uniform) &vptr);
    foreach_active(instance)
    {
        ret[instance] = atomic_swap_global(ptr[instance], value);
    }
    varying int vRet = *((varying int * uniform) &ret);
    return vRet;
}


//////////////////////////////
// Image Load/Store/Size
//////////////////////////////

static SPIRV_INLINE varying float4 imageLoad(uniform image2D &image, varying int2 coord)
{
    const varying float r_255 = 1.0 / 255.0;
    varying float4 res = float4_init(0.0);
    if (coord.x >= image.width || coord.y >= image.height || coord.x < 0 || coord.y < 0)
        return res;
    varying unsigned int index = coord.y * image.width + coord.x;
    varying pixel4D pix = image.data[index];
    res.x = ((float)pix.r) * r_255;
    res.y = ((float)pix.g) * r_255;
    res.z = ((float)pix.b) * r_255;
    res.w = ((float)pix.a) * r_255;
    return res;
}


static SPIRV_INLINE void imageStore(uniform image2D &image, varying int2 coord, varying float4 rgba)
{
    if (coord.x >= image.width || coord.y >= image.height || coord.x < 0 || coord.y < 0)
        return;
    varying float4 clamped_rgba = clamp(rgba, float4(0.0f), float4(1.0f));
    varying unsigned int index = coord.y * image.width + coord.x;
    varying pixel4D pix;
    pix.r = (unsigned int8)(clamped_rgba.x * 255);
    pix.g = (unsigned int8)(clamped_rgba.y * 255);
    pix.b = (unsigned int8)(clamped_rgba.z * 255);
    pix.a = (unsigned int8)(clamped_rgba.w * 255);
    image.data[index] = pix;
}


static SPIRV_INLINE uniform int2 imageSize(uniform image2D &image)
{
    uniform int2 ret = { image.width, image.height };
    return ret;
}

