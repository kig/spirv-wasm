//
//////////////////////////////
// This ISPC kernel is autogenerated by spirv-cross.
// Fri Jun 12 23:37:57 2020
//////////////////////////////
//

#include "spirvcross_stdlib.ispc"

//////////////////////////////
// Work Group
//////////////////////////////
static uniform int3 gl_WorkGroupSize = {16, 1, 1};


//////////////////////////////
// Resources
//////////////////////////////
struct inputBuffer
{
    int4 inputBytes[];
};


struct heapBuffer
{
    int4 heap[];
};


struct outputBuffer
{
    int4 outputBytes[];
};



//////////////////////////////
// Shader Code
//////////////////////////////
static SPIRV_INLINE varying int getE(varying int4& v, varying int& i)
{
    varying int _55 = v.x;
    varying int value = _55;
    if (i == 1)
    {
        varying int _61 = v.y;
        value = _61;
    }
    else
    {
        if (i == 2)
        {
            varying int _68 = v.z;
            value = _68;
        }
        else
        {
            if (i == 3)
            {
                varying int _76 = v.w;
                value = _76;
            }
        }
    }
    return value;
}

static SPIRV_INLINE void setE(varying int4& v, varying int& i, varying int& value)
{
    if (i == 0)
    {
        v.x = value;
    }
    else
    {
        if (i == 1)
        {
            v.y = value;
        }
        else
        {
            if (i == 2)
            {
                v.z = value;
            }
            else
            {
                v.w = value;
            }
        }
    }
}

static SPIRV_INLINE void httpd_ispc_main(varying int3 gl_GlobalInvocationID,  uniform struct outputBuffer& _247,  uniform struct heapBuffer& _216,  uniform struct inputBuffer& _113)
{
    varying int _86 = gl_GlobalInvocationID.x;
    varying int wgId = int_cast(_86) * 1024;
    for (uniform int j = 0; j < 1024; j++)
    {
        varying int reqOff = (wgId + j) * 64;
        varying int resOff = (wgId + j) * 64;
        varying int4 _117 = _113.inputBytes[reqOff];
        varying int4 requestInfo = _117;
        varying int _119 = requestInfo.x;
        if (_119 == 0)
        {
            continue;
        }
        varying int4 _128 = _113.inputBytes[reqOff + 1];
        varying int4 req = _128;
        varying int4 _133 = _113.inputBytes[reqOff + 2];
        varying int4 req2 = _133;
        varying int _136 = req.x;
        varying int method = _136;
        varying int i = resOff;
        if (method == 542393671)
        {
            varying int _146 = req.y;
            varying int _156 = req.y;
            varying int _165 = req.y;
            varying int _174 = req.z;
            varying int _182 = req.z;
            varying int _190 = req.z;
            varying int _198 = req.z;
            varying int key = ((((((((((_146 >> 8) & 255) - 48) * 1000000) + ((((_156 >> 16) & 255) - 48) * 100000)) + ((((_165 >> 24) & 255) - 48) * 10000)) + ((((_174 >> 0) & 255) - 48) * 1000)) + ((((_182 >> 8) & 255) - 48) * 100)) + ((((_190 >> 16) & 255) - 48) * 10)) + ((((_198 >> 24) & 255) - 48) * 1)) * 64;
            varying int _205 = key;
            varying int _207 = key;
            varying bool _210 = (_205 >= 0) && (_207 < 33554432);
            varying bool _222;
            if (_210)
            {
                varying int _220 = _216.heap[key].x;
                _222 = _220 > 0;
            }
            else
            {
                _222 = _210;
            }
            varying bool _230;
            if (_222)
            {
                varying int _227 = _216.heap[key].x;
                _230 = _227 <= 976;
            }
            else
            {
                _230 = _222;
            }
            if (_230)
            {
                varying int _236 = atomicCompSwap(_216.heap[key].w, 0, 1);
                varying int locked = _236;
                if (locked >= 0)
                {
                    varying int _243 = atomic_add(&_216.heap[key].w, 1);
                    varying int _253 = _216.heap[key].x;
                    _247.outputBytes[i + 0] = int4(32 + _253, 0, 0, 0);
                    _247.outputBytes[i + 1] = int4(540028978, 1210075983, 793793620, 221326897);
                    _247.outputBytes[i + 2] = int4(1852793610, 1953391988, 1887007789, 538983013);
                    varying int _276 = _216.heap[key].x;
                    varying int _280 = _216.heap[key].x;
                    varying int len = (_276 / 16) + int_cast((_280 % 16) > 0);
                    for (uniform int k = 0; k < len; k++)
                    {
                        varying int4 _303 = _216.heap[(key + 1) + k];
                        _247.outputBytes[(i + 3) + k] = _303;
                    }
                    varying int _310 = atomic_add(&_216.heap[key].w, (-1));
                }
                else
                {
                    _247.outputBytes[i + 0] = int4(48, 0, 0, 0);
                    _247.outputBytes[i + 1] = int4(540028980, 1210077006, 793793620, 221326897);
                    _247.outputBytes[i + 2] = int4(1852793610, 1953391988, 1887007789, 1948269157);
                    _247.outputBytes[i + 3] = int4(796162149, 1767992432, 218762606, 1263288842);
                }
                continue;
            }
        }
        else
        {
            if (method == 1414745936)
            {
                varying int _344 = req.y;
                varying int _350 = req.y;
                varying int _357 = req.z;
                varying int _364 = req.z;
                varying int _371 = req.z;
                varying int _378 = req.z;
                varying int _385 = req.w;
                varying int key_1 = ((((((((((_344 >> 16) & 255) - 48) * 1000000) + ((((_350 >> 24) & 255) - 48) * 100000)) + ((((_357 >> 0) & 255) - 48) * 10000)) + ((((_364 >> 8) & 255) - 48) * 1000)) + ((((_371 >> 16) & 255) - 48) * 100)) + ((((_378 >> 24) & 255) - 48) * 10)) + ((((_385 >> 0) & 255) - 48) * 1)) * 64;
                if ((key_1 >= 0) && (key_1 < 33554432))
                {
                    varying int _402 = atomicCompSwap(_216.heap[key_1].w, 0, -1);
                    varying int locked_1 = _402;
                    if (locked_1 == 0)
                    {
                        varying int rnrn = 0;
                        varying int readStart = 0;
                        varying int readEnd = 512;
                        varying int4 w = int4(0);
                        varying int l = 0;
                        varying int hi = 0;
                        for (uniform int k_1 = 13; (k_1 < 1024) && (k_1 < 1024); k_1++)
                        {
                            uniform int v4i = k_1 / 16;
                            uniform int vi = k_1 - (v4i * 16);
                            uniform int c = vi / 4;
                            uniform int b = vi - (c * 4);
                            varying int4 _451 = _113.inputBytes[(reqOff + 1) + v4i];
                            varying int4 param = _451;
                            varying int param_1 = c;
                            varying int chr = (getE(param, param_1) >> (b * 8)) & 255;
                            if (readStart > 0)
                            {
                                if (chr == 0)
                                {
                                    readEnd = k_1;
                                    break;
                                }
                                varying int wc = l / 4;
                                varying int wb = l - (wc * 4);
                                varying int4 param_2 = w;
                                varying int param_3 = wc;
                                varying int4 param_4 = w;
                                varying int param_5 = wc;
                                varying int param_6 = getE(param_2, param_3) | (chr << (wb * 8));
                                setE(param_4, param_5, param_6);
                                w = param_4;
                                l++;
                                if (l == 16)
                                {
                                    _216.heap[(key_1 + 1) + hi] = w;
                                    hi++;
                                    w = w * int4(0);
                                    l = 0;
                                }
                            }
                            else
                            {
                                varying int _512 = chr;
                                varying bool _513 = _512 == 13;
                                varying bool _519;
                                if (_513)
                                {
                                    _519 = (rnrn & 1) == 0;
                                }
                                else
                                {
                                    _519 = _513;
                                }
                                if (_519)
                                {
                                    rnrn++;
                                }
                                else
                                {
                                    varying int _525 = chr;
                                    varying bool _526 = _525 == 10;
                                    varying bool _532;
                                    if (_526)
                                    {
                                        _532 = (rnrn & 1) == 1;
                                    }
                                    else
                                    {
                                        _532 = _526;
                                    }
                                    if (_532)
                                    {
                                        rnrn++;
                                        if (rnrn == 4)
                                        {
                                            readStart = k_1;
                                        }
                                    }
                                    else
                                    {
                                        rnrn = 0;
                                    }
                                }
                            }
                        }
                        varying int _545 = l;
                        varying bool _546 = _545 > 0;
                        varying bool _552;
                        if (_546)
                        {
                            _552 = (1 + hi) < 64;
                        }
                        else
                        {
                            _552 = _546;
                        }
                        if (_552)
                        {
                            _216.heap[(key_1 + 1) + hi] = w;
                        }
                        _216.heap[key_1].x = readEnd - readStart;
                        _216.heap[key_1].w = 0;
                        _247.outputBytes[i + 0] = int4(48, 0, 0, 0);
                        _247.outputBytes[i + 1] = int4(540028978, 1210075983, 793793620, 221326897);
                        _247.outputBytes[i + 2] = int4(1852793610, 1953391988, 1887007789, 1948269157);
                        _247.outputBytes[i + 3] = int4(796162149, 1767992432, 218762606, 776687370);
                    }
                    else
                    {
                        _247.outputBytes[i + 0] = int4(48, 0, 0, 0);
                        _247.outputBytes[i + 1] = int4(540028978, 1210075983, 793793620, 221326897);
                        _247.outputBytes[i + 2] = int4(1852793610, 1953391988, 1887007789, 1948269157);
                        _247.outputBytes[i + 3] = int4(796162149, 1767992432, 218762606, 1263288842);
                    }
                    continue;
                }
            }
        }
        _247.outputBytes[i + 0] = int4(34, 0, 0, 0);
        _247.outputBytes[i + 1] = int4(540028981, 541344066, 1347703880, 825110831);
        varying int _613 = req.x;
        varying int _615 = req.y;
        varying int _617 = req.z;
        _247.outputBytes[i + 2] = int4(168626701, _613, _615, _617);
        varying int _623 = req.w;
        varying int _625 = req2.x;
        varying int _627 = req2.y;
        varying int _629 = req2.z;
        _247.outputBytes[i + 3] = int4(_623, _625, _627, _629);
    }
}


//////////////////////////////
// ISPC Entry Points
//////////////////////////////
export void httpd_dispatch_all(uniform int work_groups[3],  uniform struct outputBuffer& _247,  uniform struct heapBuffer& _216,  uniform struct inputBuffer& _113)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    
    // Loop over the work group dimensions
    for(uniform int z = 0; z < gl_NumWorkGroups.z; z++)
    {
        for(uniform int y = 0; y < gl_NumWorkGroups.y; y++)
        {
            for(uniform int x = 0; x < gl_NumWorkGroups.x; x++)
            {
                uniform int3 gl_WorkGroupID = int3(x, y, z);
                
                // Vectorise the workgroup
                foreach(lx = 0 ... gl_WorkGroupSize.x)
                {
                    varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
                    varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
                    varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
                    
                    httpd_ispc_main(gl_GlobalInvocationID,  _247,  _216,  _113);
                }
            }
        }
    }
}

export void httpd_dispatch_single(uniform int work_group_ID[3], uniform int work_groups[3],  uniform struct outputBuffer& _247,  uniform struct heapBuffer& _216,  uniform struct inputBuffer& _113)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    uniform int3 gl_WorkGroupID = int3(work_group_ID[0], work_group_ID[1], work_group_ID[2]);
    
    // Vectorise the workgroup
    foreach(lx = 0 ... gl_WorkGroupSize.x)
    {
        varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
        varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
        varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
        
        httpd_ispc_main(gl_GlobalInvocationID,  _247,  _216,  _113);
    }
}

export void httpd_dispatch_all_tiled(uniform int work_groups[3],  uniform struct outputBuffer& _247,  uniform struct heapBuffer& _216,  uniform struct inputBuffer& _113)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    
    // Loop over the work group dimensions
    for(uniform int z = 0; z < gl_NumWorkGroups.z; z++)
    {
        for(uniform int y = 0; y < gl_NumWorkGroups.y; y++)
        {
            for(uniform int x = 0; x < gl_NumWorkGroups.x; x++)
            {
                uniform int3 gl_WorkGroupID = int3(x, y, z);
                
                // Vectorise the workgroup
                foreach_tiled(lx = 0 ... gl_WorkGroupSize.x)
                {
                    varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
                    varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
                    varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
                    
                    httpd_ispc_main(gl_GlobalInvocationID,  _247,  _216,  _113);
                }
            }
        }
    }
}

export void httpd_dispatch_single_tiled(uniform int work_group_ID[3], uniform int work_groups[3],  uniform struct outputBuffer& _247,  uniform struct heapBuffer& _216,  uniform struct inputBuffer& _113)
{
    uniform int3 gl_NumWorkGroups = int3(work_groups[0], work_groups[1], work_groups[2]);
    uniform int3 gl_WorkGroupID = int3(work_group_ID[0], work_group_ID[1], work_group_ID[2]);
    
    // Vectorise the workgroup
    foreach_tiled(lx = 0 ... gl_WorkGroupSize.x)
    {
        varying int3 gl_LocalInvocationID = int3(lx, 0, 0);
        varying int3 gl_GlobalInvocationID = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
        varying int gl_LocalInvocationIndex = gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
        
        httpd_ispc_main(gl_GlobalInvocationID,  _247,  _216,  _113);
    }
}


export void httpd_get_workgroup_size(uniform int & wg_x, uniform int & wg_y, uniform int & wg_z)
{
    wg_x = gl_WorkGroupSize.x;
    wg_y = gl_WorkGroupSize.y;
    wg_z = gl_WorkGroupSize.z;
}

